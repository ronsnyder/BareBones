
BaseConfig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f4  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055c8  080055c8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055d0  080055d0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055d0  080055d0  000065d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055d4  080055d4  000065d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080055d8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000010  080055e8  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080055e8  000070d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd21  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002432  00000000  00000000  00013d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00016190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8d  00000000  00000000  000170f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019810  00000000  00000000  00017c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2cc  00000000  00000000  0003148d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b78e  00000000  00000000  00040759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a4  00000000  00000000  000dbf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000dffd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000010 	.word	0x20000010
 8000154:	00000000 	.word	0x00000000
 8000158:	08005414 	.word	0x08005414

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000014 	.word	0x20000014
 8000174:	08005414 	.word	0x08005414

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	@ 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__aeabi_d2f>:
 8000914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000918:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800091c:	bf24      	itt	cs
 800091e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000922:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000926:	d90d      	bls.n	8000944 <__aeabi_d2f+0x30>
 8000928:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800092c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000930:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000934:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000938:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800093c:	bf08      	it	eq
 800093e:	f020 0001 	biceq.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000948:	d121      	bne.n	800098e <__aeabi_d2f+0x7a>
 800094a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800094e:	bfbc      	itt	lt
 8000950:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000954:	4770      	bxlt	lr
 8000956:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095e:	f1c2 0218 	rsb	r2, r2, #24
 8000962:	f1c2 0c20 	rsb	ip, r2, #32
 8000966:	fa10 f30c 	lsls.w	r3, r0, ip
 800096a:	fa20 f002 	lsr.w	r0, r0, r2
 800096e:	bf18      	it	ne
 8000970:	f040 0001 	orrne.w	r0, r0, #1
 8000974:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000978:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800097c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000980:	ea40 000c 	orr.w	r0, r0, ip
 8000984:	fa23 f302 	lsr.w	r3, r3, r2
 8000988:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800098c:	e7cc      	b.n	8000928 <__aeabi_d2f+0x14>
 800098e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000992:	d107      	bne.n	80009a4 <__aeabi_d2f+0x90>
 8000994:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000998:	bf1e      	ittt	ne
 800099a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800099e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009a2:	4770      	bxne	lr
 80009a4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_frsub>:
 80009b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009b8:	e002      	b.n	80009c0 <__addsf3>
 80009ba:	bf00      	nop

080009bc <__aeabi_fsub>:
 80009bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009c0 <__addsf3>:
 80009c0:	0042      	lsls	r2, r0, #1
 80009c2:	bf1f      	itttt	ne
 80009c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c8:	ea92 0f03 	teqne	r2, r3
 80009cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d4:	d06a      	beq.n	8000aac <__addsf3+0xec>
 80009d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009de:	bfc1      	itttt	gt
 80009e0:	18d2      	addgt	r2, r2, r3
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	4048      	eorgt	r0, r1
 80009e6:	4041      	eorgt	r1, r0
 80009e8:	bfb8      	it	lt
 80009ea:	425b      	neglt	r3, r3
 80009ec:	2b19      	cmp	r3, #25
 80009ee:	bf88      	it	hi
 80009f0:	4770      	bxhi	lr
 80009f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a0e:	bf18      	it	ne
 8000a10:	4249      	negne	r1, r1
 8000a12:	ea92 0f03 	teq	r2, r3
 8000a16:	d03f      	beq.n	8000a98 <__addsf3+0xd8>
 8000a18:	f1a2 0201 	sub.w	r2, r2, #1
 8000a1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a20:	eb10 000c 	adds.w	r0, r0, ip
 8000a24:	f1c3 0320 	rsb	r3, r3, #32
 8000a28:	fa01 f103 	lsl.w	r1, r1, r3
 8000a2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a30:	d502      	bpl.n	8000a38 <__addsf3+0x78>
 8000a32:	4249      	negs	r1, r1
 8000a34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a3c:	d313      	bcc.n	8000a66 <__addsf3+0xa6>
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a42:	d306      	bcc.n	8000a52 <__addsf3+0x92>
 8000a44:	0840      	lsrs	r0, r0, #1
 8000a46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a4a:	f102 0201 	add.w	r2, r2, #1
 8000a4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000a50:	d251      	bcs.n	8000af6 <__addsf3+0x136>
 8000a52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a5a:	bf08      	it	eq
 8000a5c:	f020 0001 	biceq.w	r0, r0, #1
 8000a60:	ea40 0003 	orr.w	r0, r0, r3
 8000a64:	4770      	bx	lr
 8000a66:	0049      	lsls	r1, r1, #1
 8000a68:	eb40 0000 	adc.w	r0, r0, r0
 8000a6c:	3a01      	subs	r2, #1
 8000a6e:	bf28      	it	cs
 8000a70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a74:	d2ed      	bcs.n	8000a52 <__addsf3+0x92>
 8000a76:	fab0 fc80 	clz	ip, r0
 8000a7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a86:	bfaa      	itet	ge
 8000a88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a8c:	4252      	neglt	r2, r2
 8000a8e:	4318      	orrge	r0, r3
 8000a90:	bfbc      	itt	lt
 8000a92:	40d0      	lsrlt	r0, r2
 8000a94:	4318      	orrlt	r0, r3
 8000a96:	4770      	bx	lr
 8000a98:	f092 0f00 	teq	r2, #0
 8000a9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000aa0:	bf06      	itte	eq
 8000aa2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aa6:	3201      	addeq	r2, #1
 8000aa8:	3b01      	subne	r3, #1
 8000aaa:	e7b5      	b.n	8000a18 <__addsf3+0x58>
 8000aac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ab0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab4:	bf18      	it	ne
 8000ab6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aba:	d021      	beq.n	8000b00 <__addsf3+0x140>
 8000abc:	ea92 0f03 	teq	r2, r3
 8000ac0:	d004      	beq.n	8000acc <__addsf3+0x10c>
 8000ac2:	f092 0f00 	teq	r2, #0
 8000ac6:	bf08      	it	eq
 8000ac8:	4608      	moveq	r0, r1
 8000aca:	4770      	bx	lr
 8000acc:	ea90 0f01 	teq	r0, r1
 8000ad0:	bf1c      	itt	ne
 8000ad2:	2000      	movne	r0, #0
 8000ad4:	4770      	bxne	lr
 8000ad6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ada:	d104      	bne.n	8000ae6 <__addsf3+0x126>
 8000adc:	0040      	lsls	r0, r0, #1
 8000ade:	bf28      	it	cs
 8000ae0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ae4:	4770      	bx	lr
 8000ae6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000aea:	bf3c      	itt	cc
 8000aec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000af0:	4770      	bxcc	lr
 8000af2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	4770      	bx	lr
 8000b00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b04:	bf16      	itet	ne
 8000b06:	4608      	movne	r0, r1
 8000b08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b0c:	4601      	movne	r1, r0
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	bf06      	itte	eq
 8000b12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b16:	ea90 0f01 	teqeq	r0, r1
 8000b1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_ui2f>:
 8000b20:	f04f 0300 	mov.w	r3, #0
 8000b24:	e004      	b.n	8000b30 <__aeabi_i2f+0x8>
 8000b26:	bf00      	nop

08000b28 <__aeabi_i2f>:
 8000b28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b2c:	bf48      	it	mi
 8000b2e:	4240      	negmi	r0, r0
 8000b30:	ea5f 0c00 	movs.w	ip, r0
 8000b34:	bf08      	it	eq
 8000b36:	4770      	bxeq	lr
 8000b38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b3c:	4601      	mov	r1, r0
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	e01c      	b.n	8000b7e <__aeabi_l2f+0x2a>

08000b44 <__aeabi_ul2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	e00a      	b.n	8000b68 <__aeabi_l2f+0x14>
 8000b52:	bf00      	nop

08000b54 <__aeabi_l2f>:
 8000b54:	ea50 0201 	orrs.w	r2, r0, r1
 8000b58:	bf08      	it	eq
 8000b5a:	4770      	bxeq	lr
 8000b5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b60:	d502      	bpl.n	8000b68 <__aeabi_l2f+0x14>
 8000b62:	4240      	negs	r0, r0
 8000b64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b68:	ea5f 0c01 	movs.w	ip, r1
 8000b6c:	bf02      	ittt	eq
 8000b6e:	4684      	moveq	ip, r0
 8000b70:	4601      	moveq	r1, r0
 8000b72:	2000      	moveq	r0, #0
 8000b74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b78:	bf08      	it	eq
 8000b7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b82:	fabc f28c 	clz	r2, ip
 8000b86:	3a08      	subs	r2, #8
 8000b88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b8c:	db10      	blt.n	8000bb0 <__aeabi_l2f+0x5c>
 8000b8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b92:	4463      	add	r3, ip
 8000b94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b98:	f1c2 0220 	rsb	r2, r2, #32
 8000b9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ba0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba4:	eb43 0002 	adc.w	r0, r3, r2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f102 0220 	add.w	r2, r2, #32
 8000bb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_fmul>:
 8000bd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd8:	bf1e      	ittt	ne
 8000bda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bde:	ea92 0f0c 	teqne	r2, ip
 8000be2:	ea93 0f0c 	teqne	r3, ip
 8000be6:	d06f      	beq.n	8000cc8 <__aeabi_fmul+0xf8>
 8000be8:	441a      	add	r2, r3
 8000bea:	ea80 0c01 	eor.w	ip, r0, r1
 8000bee:	0240      	lsls	r0, r0, #9
 8000bf0:	bf18      	it	ne
 8000bf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf6:	d01e      	beq.n	8000c36 <__aeabi_fmul+0x66>
 8000bf8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c04:	fba0 3101 	umull	r3, r1, r0, r1
 8000c08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c10:	bf3e      	ittt	cc
 8000c12:	0049      	lslcc	r1, r1, #1
 8000c14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c18:	005b      	lslcc	r3, r3, #1
 8000c1a:	ea40 0001 	orr.w	r0, r0, r1
 8000c1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c22:	2afd      	cmp	r2, #253	@ 0xfd
 8000c24:	d81d      	bhi.n	8000c62 <__aeabi_fmul+0x92>
 8000c26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	4770      	bx	lr
 8000c36:	f090 0f00 	teq	r0, #0
 8000c3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c3e:	bf08      	it	eq
 8000c40:	0249      	lsleq	r1, r1, #9
 8000c42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000c4c:	bfc2      	ittt	gt
 8000c4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c56:	4770      	bxgt	lr
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	dc5d      	bgt.n	8000d20 <__aeabi_fmul+0x150>
 8000c64:	f112 0f19 	cmn.w	r2, #25
 8000c68:	bfdc      	itt	le
 8000c6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c6e:	4770      	bxle	lr
 8000c70:	f1c2 0200 	rsb	r2, r2, #0
 8000c74:	0041      	lsls	r1, r0, #1
 8000c76:	fa21 f102 	lsr.w	r1, r1, r2
 8000c7a:	f1c2 0220 	rsb	r2, r2, #32
 8000c7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c86:	f140 0000 	adc.w	r0, r0, #0
 8000c8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8e:	bf08      	it	eq
 8000c90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c94:	4770      	bx	lr
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0040      	lsleq	r0, r0, #1
 8000ca2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ca6:	3a01      	subeq	r2, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xce>
 8000caa:	ea40 000c 	orr.w	r0, r0, ip
 8000cae:	f093 0f00 	teq	r3, #0
 8000cb2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0049      	lsleq	r1, r1, #1
 8000cba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cbe:	3b01      	subeq	r3, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xe6>
 8000cc2:	ea41 010c 	orr.w	r1, r1, ip
 8000cc6:	e78f      	b.n	8000be8 <__aeabi_fmul+0x18>
 8000cc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ccc:	ea92 0f0c 	teq	r2, ip
 8000cd0:	bf18      	it	ne
 8000cd2:	ea93 0f0c 	teqne	r3, ip
 8000cd6:	d00a      	beq.n	8000cee <__aeabi_fmul+0x11e>
 8000cd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cdc:	bf18      	it	ne
 8000cde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ce2:	d1d8      	bne.n	8000c96 <__aeabi_fmul+0xc6>
 8000ce4:	ea80 0001 	eor.w	r0, r0, r1
 8000ce8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f090 0f00 	teq	r0, #0
 8000cf2:	bf17      	itett	ne
 8000cf4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cf8:	4608      	moveq	r0, r1
 8000cfa:	f091 0f00 	teqne	r1, #0
 8000cfe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000d02:	d014      	beq.n	8000d2e <__aeabi_fmul+0x15e>
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	d101      	bne.n	8000d0e <__aeabi_fmul+0x13e>
 8000d0a:	0242      	lsls	r2, r0, #9
 8000d0c:	d10f      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d0e:	ea93 0f0c 	teq	r3, ip
 8000d12:	d103      	bne.n	8000d1c <__aeabi_fmul+0x14c>
 8000d14:	024b      	lsls	r3, r1, #9
 8000d16:	bf18      	it	ne
 8000d18:	4608      	movne	r0, r1
 8000d1a:	d108      	bne.n	8000d2e <__aeabi_fmul+0x15e>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bx	lr
 8000d2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_fdiv>:
 8000d38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d40:	bf1e      	ittt	ne
 8000d42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d46:	ea92 0f0c 	teqne	r2, ip
 8000d4a:	ea93 0f0c 	teqne	r3, ip
 8000d4e:	d069      	beq.n	8000e24 <__aeabi_fdiv+0xec>
 8000d50:	eba2 0203 	sub.w	r2, r2, r3
 8000d54:	ea80 0c01 	eor.w	ip, r0, r1
 8000d58:	0249      	lsls	r1, r1, #9
 8000d5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5e:	d037      	beq.n	8000dd0 <__aeabi_fdiv+0x98>
 8000d60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d70:	428b      	cmp	r3, r1
 8000d72:	bf38      	it	cc
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	bf24      	itt	cs
 8000d82:	1a5b      	subcs	r3, r3, r1
 8000d84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d8c:	bf24      	itt	cs
 8000d8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d9a:	bf24      	itt	cs
 8000d9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000da0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da8:	bf24      	itt	cs
 8000daa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dba:	d1e0      	bne.n	8000d7e <__aeabi_fdiv+0x46>
 8000dbc:	2afd      	cmp	r2, #253	@ 0xfd
 8000dbe:	f63f af50 	bhi.w	8000c62 <__aeabi_fmul+0x92>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc8:	bf08      	it	eq
 8000dca:	f020 0001 	biceq.w	r0, r0, #1
 8000dce:	4770      	bx	lr
 8000dd0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd8:	327f      	adds	r2, #127	@ 0x7f
 8000dda:	bfc2      	ittt	gt
 8000ddc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000de0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de4:	4770      	bxgt	lr
 8000de6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	3a01      	subs	r2, #1
 8000df0:	e737      	b.n	8000c62 <__aeabi_fmul+0x92>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xc2>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xda>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e795      	b.n	8000d50 <__aeabi_fdiv+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d108      	bne.n	8000e40 <__aeabi_fdiv+0x108>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	f47f af7d 	bne.w	8000d2e <__aeabi_fmul+0x15e>
 8000e34:	ea93 0f0c 	teq	r3, ip
 8000e38:	f47f af70 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e776      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e40:	ea93 0f0c 	teq	r3, ip
 8000e44:	d104      	bne.n	8000e50 <__aeabi_fdiv+0x118>
 8000e46:	024b      	lsls	r3, r1, #9
 8000e48:	f43f af4c 	beq.w	8000ce4 <__aeabi_fmul+0x114>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e76e      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e54:	bf18      	it	ne
 8000e56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e5a:	d1ca      	bne.n	8000df2 <__aeabi_fdiv+0xba>
 8000e5c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e60:	f47f af5c 	bne.w	8000d1c <__aeabi_fmul+0x14c>
 8000e64:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e68:	f47f af3c 	bne.w	8000ce4 <__aeabi_fmul+0x114>
 8000e6c:	e75f      	b.n	8000d2e <__aeabi_fmul+0x15e>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_ldivmod>:
 8000e70:	b97b      	cbnz	r3, 8000e92 <__aeabi_ldivmod+0x22>
 8000e72:	b972      	cbnz	r2, 8000e92 <__aeabi_ldivmod+0x22>
 8000e74:	2900      	cmp	r1, #0
 8000e76:	bfbe      	ittt	lt
 8000e78:	2000      	movlt	r0, #0
 8000e7a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e7e:	e006      	blt.n	8000e8e <__aeabi_ldivmod+0x1e>
 8000e80:	bf08      	it	eq
 8000e82:	2800      	cmpeq	r0, #0
 8000e84:	bf1c      	itt	ne
 8000e86:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e8a:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8e:	f000 b9bb 	b.w	8001208 <__aeabi_idiv0>
 8000e92:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e96:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	db09      	blt.n	8000eb2 <__aeabi_ldivmod+0x42>
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db1a      	blt.n	8000ed8 <__aeabi_ldivmod+0x68>
 8000ea2:	f000 f835 	bl	8000f10 <__udivmoddi4>
 8000ea6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eae:	b004      	add	sp, #16
 8000eb0:	4770      	bx	lr
 8000eb2:	4240      	negs	r0, r0
 8000eb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db1b      	blt.n	8000ef4 <__aeabi_ldivmod+0x84>
 8000ebc:	f000 f828 	bl	8000f10 <__udivmoddi4>
 8000ec0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ec8:	b004      	add	sp, #16
 8000eca:	4240      	negs	r0, r0
 8000ecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed0:	4252      	negs	r2, r2
 8000ed2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed6:	4770      	bx	lr
 8000ed8:	4252      	negs	r2, r2
 8000eda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ede:	f000 f817 	bl	8000f10 <__udivmoddi4>
 8000ee2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eea:	b004      	add	sp, #16
 8000eec:	4240      	negs	r0, r0
 8000eee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef2:	4770      	bx	lr
 8000ef4:	4252      	negs	r2, r2
 8000ef6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000efa:	f000 f809 	bl	8000f10 <__udivmoddi4>
 8000efe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f06:	b004      	add	sp, #16
 8000f08:	4252      	negs	r2, r2
 8000f0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f0e:	4770      	bx	lr

08000f10 <__udivmoddi4>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	9d08      	ldr	r5, [sp, #32]
 8000f16:	468e      	mov	lr, r1
 8000f18:	4604      	mov	r4, r0
 8000f1a:	4688      	mov	r8, r1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d14a      	bne.n	8000fb6 <__udivmoddi4+0xa6>
 8000f20:	428a      	cmp	r2, r1
 8000f22:	4617      	mov	r7, r2
 8000f24:	d962      	bls.n	8000fec <__udivmoddi4+0xdc>
 8000f26:	fab2 f682 	clz	r6, r2
 8000f2a:	b14e      	cbz	r6, 8000f40 <__udivmoddi4+0x30>
 8000f2c:	f1c6 0320 	rsb	r3, r6, #32
 8000f30:	fa01 f806 	lsl.w	r8, r1, r6
 8000f34:	fa20 f303 	lsr.w	r3, r0, r3
 8000f38:	40b7      	lsls	r7, r6
 8000f3a:	ea43 0808 	orr.w	r8, r3, r8
 8000f3e:	40b4      	lsls	r4, r6
 8000f40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f44:	fa1f fc87 	uxth.w	ip, r7
 8000f48:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f4c:	0c23      	lsrs	r3, r4, #16
 8000f4e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fb01 f20c 	mul.w	r2, r1, ip
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d909      	bls.n	8000f72 <__udivmoddi4+0x62>
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f64:	f080 80ea 	bcs.w	800113c <__udivmoddi4+0x22c>
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f240 80e7 	bls.w	800113c <__udivmoddi4+0x22c>
 8000f6e:	3902      	subs	r1, #2
 8000f70:	443b      	add	r3, r7
 8000f72:	1a9a      	subs	r2, r3, r2
 8000f74:	b2a3      	uxth	r3, r4
 8000f76:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f7a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f82:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f86:	459c      	cmp	ip, r3
 8000f88:	d909      	bls.n	8000f9e <__udivmoddi4+0x8e>
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f90:	f080 80d6 	bcs.w	8001140 <__udivmoddi4+0x230>
 8000f94:	459c      	cmp	ip, r3
 8000f96:	f240 80d3 	bls.w	8001140 <__udivmoddi4+0x230>
 8000f9a:	443b      	add	r3, r7
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fa2:	eba3 030c 	sub.w	r3, r3, ip
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	b11d      	cbz	r5, 8000fb2 <__udivmoddi4+0xa2>
 8000faa:	40f3      	lsrs	r3, r6
 8000fac:	2200      	movs	r2, #0
 8000fae:	e9c5 3200 	strd	r3, r2, [r5]
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d905      	bls.n	8000fc6 <__udivmoddi4+0xb6>
 8000fba:	b10d      	cbz	r5, 8000fc0 <__udivmoddi4+0xb0>
 8000fbc:	e9c5 0100 	strd	r0, r1, [r5]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4608      	mov	r0, r1
 8000fc4:	e7f5      	b.n	8000fb2 <__udivmoddi4+0xa2>
 8000fc6:	fab3 f183 	clz	r1, r3
 8000fca:	2900      	cmp	r1, #0
 8000fcc:	d146      	bne.n	800105c <__udivmoddi4+0x14c>
 8000fce:	4573      	cmp	r3, lr
 8000fd0:	d302      	bcc.n	8000fd8 <__udivmoddi4+0xc8>
 8000fd2:	4282      	cmp	r2, r0
 8000fd4:	f200 8105 	bhi.w	80011e2 <__udivmoddi4+0x2d2>
 8000fd8:	1a84      	subs	r4, r0, r2
 8000fda:	eb6e 0203 	sbc.w	r2, lr, r3
 8000fde:	2001      	movs	r0, #1
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d0e5      	beq.n	8000fb2 <__udivmoddi4+0xa2>
 8000fe6:	e9c5 4800 	strd	r4, r8, [r5]
 8000fea:	e7e2      	b.n	8000fb2 <__udivmoddi4+0xa2>
 8000fec:	2a00      	cmp	r2, #0
 8000fee:	f000 8090 	beq.w	8001112 <__udivmoddi4+0x202>
 8000ff2:	fab2 f682 	clz	r6, r2
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	f040 80a4 	bne.w	8001144 <__udivmoddi4+0x234>
 8000ffc:	1a8a      	subs	r2, r1, r2
 8000ffe:	0c03      	lsrs	r3, r0, #16
 8001000:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001004:	b280      	uxth	r0, r0
 8001006:	b2bc      	uxth	r4, r7
 8001008:	2101      	movs	r1, #1
 800100a:	fbb2 fcfe 	udiv	ip, r2, lr
 800100e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001016:	fb04 f20c 	mul.w	r2, r4, ip
 800101a:	429a      	cmp	r2, r3
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x11e>
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001024:	d202      	bcs.n	800102c <__udivmoddi4+0x11c>
 8001026:	429a      	cmp	r2, r3
 8001028:	f200 80e0 	bhi.w	80011ec <__udivmoddi4+0x2dc>
 800102c:	46c4      	mov	ip, r8
 800102e:	1a9b      	subs	r3, r3, r2
 8001030:	fbb3 f2fe 	udiv	r2, r3, lr
 8001034:	fb0e 3312 	mls	r3, lr, r2, r3
 8001038:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800103c:	fb02 f404 	mul.w	r4, r2, r4
 8001040:	429c      	cmp	r4, r3
 8001042:	d907      	bls.n	8001054 <__udivmoddi4+0x144>
 8001044:	18fb      	adds	r3, r7, r3
 8001046:	f102 30ff 	add.w	r0, r2, #4294967295
 800104a:	d202      	bcs.n	8001052 <__udivmoddi4+0x142>
 800104c:	429c      	cmp	r4, r3
 800104e:	f200 80ca 	bhi.w	80011e6 <__udivmoddi4+0x2d6>
 8001052:	4602      	mov	r2, r0
 8001054:	1b1b      	subs	r3, r3, r4
 8001056:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800105a:	e7a5      	b.n	8000fa8 <__udivmoddi4+0x98>
 800105c:	f1c1 0620 	rsb	r6, r1, #32
 8001060:	408b      	lsls	r3, r1
 8001062:	fa22 f706 	lsr.w	r7, r2, r6
 8001066:	431f      	orrs	r7, r3
 8001068:	fa0e f401 	lsl.w	r4, lr, r1
 800106c:	fa20 f306 	lsr.w	r3, r0, r6
 8001070:	fa2e fe06 	lsr.w	lr, lr, r6
 8001074:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001078:	4323      	orrs	r3, r4
 800107a:	fa00 f801 	lsl.w	r8, r0, r1
 800107e:	fa1f fc87 	uxth.w	ip, r7
 8001082:	fbbe f0f9 	udiv	r0, lr, r9
 8001086:	0c1c      	lsrs	r4, r3, #16
 8001088:	fb09 ee10 	mls	lr, r9, r0, lr
 800108c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001090:	fb00 fe0c 	mul.w	lr, r0, ip
 8001094:	45a6      	cmp	lr, r4
 8001096:	fa02 f201 	lsl.w	r2, r2, r1
 800109a:	d909      	bls.n	80010b0 <__udivmoddi4+0x1a0>
 800109c:	193c      	adds	r4, r7, r4
 800109e:	f100 3aff 	add.w	sl, r0, #4294967295
 80010a2:	f080 809c 	bcs.w	80011de <__udivmoddi4+0x2ce>
 80010a6:	45a6      	cmp	lr, r4
 80010a8:	f240 8099 	bls.w	80011de <__udivmoddi4+0x2ce>
 80010ac:	3802      	subs	r0, #2
 80010ae:	443c      	add	r4, r7
 80010b0:	eba4 040e 	sub.w	r4, r4, lr
 80010b4:	fa1f fe83 	uxth.w	lr, r3
 80010b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010bc:	fb09 4413 	mls	r4, r9, r3, r4
 80010c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80010c8:	45a4      	cmp	ip, r4
 80010ca:	d908      	bls.n	80010de <__udivmoddi4+0x1ce>
 80010cc:	193c      	adds	r4, r7, r4
 80010ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80010d2:	f080 8082 	bcs.w	80011da <__udivmoddi4+0x2ca>
 80010d6:	45a4      	cmp	ip, r4
 80010d8:	d97f      	bls.n	80011da <__udivmoddi4+0x2ca>
 80010da:	3b02      	subs	r3, #2
 80010dc:	443c      	add	r4, r7
 80010de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010e2:	eba4 040c 	sub.w	r4, r4, ip
 80010e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80010ea:	4564      	cmp	r4, ip
 80010ec:	4673      	mov	r3, lr
 80010ee:	46e1      	mov	r9, ip
 80010f0:	d362      	bcc.n	80011b8 <__udivmoddi4+0x2a8>
 80010f2:	d05f      	beq.n	80011b4 <__udivmoddi4+0x2a4>
 80010f4:	b15d      	cbz	r5, 800110e <__udivmoddi4+0x1fe>
 80010f6:	ebb8 0203 	subs.w	r2, r8, r3
 80010fa:	eb64 0409 	sbc.w	r4, r4, r9
 80010fe:	fa04 f606 	lsl.w	r6, r4, r6
 8001102:	fa22 f301 	lsr.w	r3, r2, r1
 8001106:	431e      	orrs	r6, r3
 8001108:	40cc      	lsrs	r4, r1
 800110a:	e9c5 6400 	strd	r6, r4, [r5]
 800110e:	2100      	movs	r1, #0
 8001110:	e74f      	b.n	8000fb2 <__udivmoddi4+0xa2>
 8001112:	fbb1 fcf2 	udiv	ip, r1, r2
 8001116:	0c01      	lsrs	r1, r0, #16
 8001118:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800111c:	b280      	uxth	r0, r0
 800111e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001122:	463b      	mov	r3, r7
 8001124:	4638      	mov	r0, r7
 8001126:	463c      	mov	r4, r7
 8001128:	46b8      	mov	r8, r7
 800112a:	46be      	mov	lr, r7
 800112c:	2620      	movs	r6, #32
 800112e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001132:	eba2 0208 	sub.w	r2, r2, r8
 8001136:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800113a:	e766      	b.n	800100a <__udivmoddi4+0xfa>
 800113c:	4601      	mov	r1, r0
 800113e:	e718      	b.n	8000f72 <__udivmoddi4+0x62>
 8001140:	4610      	mov	r0, r2
 8001142:	e72c      	b.n	8000f9e <__udivmoddi4+0x8e>
 8001144:	f1c6 0220 	rsb	r2, r6, #32
 8001148:	fa2e f302 	lsr.w	r3, lr, r2
 800114c:	40b7      	lsls	r7, r6
 800114e:	40b1      	lsls	r1, r6
 8001150:	fa20 f202 	lsr.w	r2, r0, r2
 8001154:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001158:	430a      	orrs	r2, r1
 800115a:	fbb3 f8fe 	udiv	r8, r3, lr
 800115e:	b2bc      	uxth	r4, r7
 8001160:	fb0e 3318 	mls	r3, lr, r8, r3
 8001164:	0c11      	lsrs	r1, r2, #16
 8001166:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800116a:	fb08 f904 	mul.w	r9, r8, r4
 800116e:	40b0      	lsls	r0, r6
 8001170:	4589      	cmp	r9, r1
 8001172:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001176:	b280      	uxth	r0, r0
 8001178:	d93e      	bls.n	80011f8 <__udivmoddi4+0x2e8>
 800117a:	1879      	adds	r1, r7, r1
 800117c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001180:	d201      	bcs.n	8001186 <__udivmoddi4+0x276>
 8001182:	4589      	cmp	r9, r1
 8001184:	d81f      	bhi.n	80011c6 <__udivmoddi4+0x2b6>
 8001186:	eba1 0109 	sub.w	r1, r1, r9
 800118a:	fbb1 f9fe 	udiv	r9, r1, lr
 800118e:	fb09 f804 	mul.w	r8, r9, r4
 8001192:	fb0e 1119 	mls	r1, lr, r9, r1
 8001196:	b292      	uxth	r2, r2
 8001198:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800119c:	4542      	cmp	r2, r8
 800119e:	d229      	bcs.n	80011f4 <__udivmoddi4+0x2e4>
 80011a0:	18ba      	adds	r2, r7, r2
 80011a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011a6:	d2c4      	bcs.n	8001132 <__udivmoddi4+0x222>
 80011a8:	4542      	cmp	r2, r8
 80011aa:	d2c2      	bcs.n	8001132 <__udivmoddi4+0x222>
 80011ac:	f1a9 0102 	sub.w	r1, r9, #2
 80011b0:	443a      	add	r2, r7
 80011b2:	e7be      	b.n	8001132 <__udivmoddi4+0x222>
 80011b4:	45f0      	cmp	r8, lr
 80011b6:	d29d      	bcs.n	80010f4 <__udivmoddi4+0x1e4>
 80011b8:	ebbe 0302 	subs.w	r3, lr, r2
 80011bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011c0:	3801      	subs	r0, #1
 80011c2:	46e1      	mov	r9, ip
 80011c4:	e796      	b.n	80010f4 <__udivmoddi4+0x1e4>
 80011c6:	eba7 0909 	sub.w	r9, r7, r9
 80011ca:	4449      	add	r1, r9
 80011cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80011d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80011d4:	fb09 f804 	mul.w	r8, r9, r4
 80011d8:	e7db      	b.n	8001192 <__udivmoddi4+0x282>
 80011da:	4673      	mov	r3, lr
 80011dc:	e77f      	b.n	80010de <__udivmoddi4+0x1ce>
 80011de:	4650      	mov	r0, sl
 80011e0:	e766      	b.n	80010b0 <__udivmoddi4+0x1a0>
 80011e2:	4608      	mov	r0, r1
 80011e4:	e6fd      	b.n	8000fe2 <__udivmoddi4+0xd2>
 80011e6:	443b      	add	r3, r7
 80011e8:	3a02      	subs	r2, #2
 80011ea:	e733      	b.n	8001054 <__udivmoddi4+0x144>
 80011ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f0:	443b      	add	r3, r7
 80011f2:	e71c      	b.n	800102e <__udivmoddi4+0x11e>
 80011f4:	4649      	mov	r1, r9
 80011f6:	e79c      	b.n	8001132 <__udivmoddi4+0x222>
 80011f8:	eba1 0109 	sub.w	r1, r1, r9
 80011fc:	46c4      	mov	ip, r8
 80011fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001202:	fb09 f804 	mul.w	r8, r9, r4
 8001206:	e7c4      	b.n	8001192 <__udivmoddi4+0x282>

08001208 <__aeabi_idiv0>:
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop

0800120c <LM75ADP_conf>:


/*
 * Configure Temp Sensor
 */
HAL_StatusTypeDef LM75ADP_conf(I2C_HandleTypeDef *hi2c, uint32_t Timeout){
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af02      	add	r7, sp, #8
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
	static uint8_t command[2] = {0};
	command[0] = LM75ADP_Reg_Conf;
 8001216:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <LM75ADP_conf+0x3c>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
	command[1] = LM75ADP_Config_Mode;
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <LM75ADP_conf+0x3c>)
 800121e:	2202      	movs	r2, #2
 8001220:	705a      	strb	r2, [r3, #1]
	uint16_t Size = sizeof(command);
 8001222:	2302      	movs	r3, #2
 8001224:	81fb      	strh	r3, [r7, #14]
	uint16_t DevAddress = LM75ADP_I2C_ADDR;
 8001226:	2390      	movs	r3, #144	@ 0x90
 8001228:	81bb      	strh	r3, [r7, #12]

	HAL_StatusTypeDef st_tx = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, Size, LM75ADP_I2C_TIMEOUT);
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	89b9      	ldrh	r1, [r7, #12]
 800122e:	2264      	movs	r2, #100	@ 0x64
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <LM75ADP_conf+0x3c>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f001 fdf7 	bl	8002e28 <HAL_I2C_Master_Transmit>
 800123a:	4603      	mov	r3, r0
 800123c:	72fb      	strb	r3, [r7, #11]

	return st_tx;
 800123e:	7afb      	ldrb	r3, [r7, #11]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000002c 	.word	0x2000002c

0800124c <LM75ADP_read>:

/*
 * Read Temp Sensor
 */
HAL_StatusTypeDef LM75ADP_read(I2C_HandleTypeDef *hi2c, LM75_Data *result, uint32_t Timeout){
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	static uint8_t command[1] = {0};
	command[0] = LM75ADP_Reg_Temp;
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <LM75ADP_read+0xa8>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	uint16_t Size = sizeof(command);
 800125e:	2301      	movs	r3, #1
 8001260:	82bb      	strh	r3, [r7, #20]
	uint16_t DevAddress = LM75ADP_I2C_ADDR;
 8001262:	2390      	movs	r3, #144	@ 0x90
 8001264:	827b      	strh	r3, [r7, #18]

	static uint8_t resp[LM75ADP_I2C_RESP_LEN] = {0};

	HAL_StatusTypeDef st_tx = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, Size, LM75ADP_I2C_TIMEOUT);
 8001266:	8abb      	ldrh	r3, [r7, #20]
 8001268:	8a79      	ldrh	r1, [r7, #18]
 800126a:	2264      	movs	r2, #100	@ 0x64
 800126c:	9200      	str	r2, [sp, #0]
 800126e:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <LM75ADP_read+0xa8>)
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f001 fdd9 	bl	8002e28 <HAL_I2C_Master_Transmit>
 8001276:	4603      	mov	r3, r0
 8001278:	75fb      	strb	r3, [r7, #23]
	result->st_tx = st_tx;
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	7dfa      	ldrb	r2, [r7, #23]
 800127e:	719a      	strb	r2, [r3, #6]
	if(st_tx == HAL_OK){
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d131      	bne.n	80012ea <LM75ADP_read+0x9e>
		HAL_StatusTypeDef st_rx = HAL_I2C_Master_Receive(hi2c, LM75ADP_I2C_ADDR, resp, LM75ADP_I2C_RESP_LEN, LM75ADP_I2C_TIMEOUT);
 8001286:	2364      	movs	r3, #100	@ 0x64
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2302      	movs	r3, #2
 800128c:	4a1a      	ldr	r2, [pc, #104]	@ (80012f8 <LM75ADP_read+0xac>)
 800128e:	2190      	movs	r1, #144	@ 0x90
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f001 fee1 	bl	8003058 <HAL_I2C_Master_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	747b      	strb	r3, [r7, #17]

		result->st_rx = st_rx;   // store status
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	7c7a      	ldrb	r2, [r7, #17]
 800129e:	71da      	strb	r2, [r3, #7]
		st_tx = st_rx;            // return last status
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	75fb      	strb	r3, [r7, #23]

		if(st_rx == HAL_OK){
 80012a4:	7c7b      	ldrb	r3, [r7, #17]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d11f      	bne.n	80012ea <LM75ADP_read+0x9e>
			result->i_temp = (resp[0] <<8) |resp[1];  // 2s compliment value
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <LM75ADP_read+0xac>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <LM75ADP_read+0xac>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21b      	sxth	r3, r3
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	809a      	strh	r2, [r3, #4]
			result->f_temp = result->i_temp / 256.0; // Float value
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	889b      	ldrh	r3, [r3, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f8a7 	bl	800041c <__aeabi_i2d>
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <LM75ADP_read+0xb0>)
 80012d4:	f7ff fa36 	bl	8000744 <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fb18 	bl	8000914 <__aeabi_d2f>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	601a      	str	r2, [r3, #0]
		}
	}
	return st_tx;
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000030 	.word	0x20000030
 80012f8:	20000034 	.word	0x20000034
 80012fc:	40700000 	.word	0x40700000

08001300 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2203      	movs	r2, #3
 800130c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2203      	movs	r2, #3
 8001318:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	715a      	strb	r2, [r3, #5]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr

08001336 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001336:	b580      	push	{r7, lr}
 8001338:	b08a      	sub	sp, #40	@ 0x28
 800133a:	af04      	add	r7, sp, #16
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	460b      	mov	r3, r1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	b29a      	uxth	r2, r3
 8001354:	8af9      	ldrh	r1, [r7, #22]
 8001356:	f241 3388 	movw	r3, #5000	@ 0x1388
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2302      	movs	r3, #2
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	f002 f880 	bl	800346c <HAL_I2C_Mem_Read>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001372:	7d7b      	ldrb	r3, [r7, #21]
 8001374:	b21b      	sxth	r3, r3
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	7d3b      	ldrb	r3, [r7, #20]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29a      	uxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	801a      	strh	r2, [r3, #0]
		return true;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <read_register16+0x58>
	} else
		return false;
 800138c:	2300      	movs	r3, #0

}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001396:	b590      	push	{r4, r7, lr}
 8001398:	b08b      	sub	sp, #44	@ 0x2c
 800139a:	af04      	add	r7, sp, #16
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	72fb      	strb	r3, [r7, #11]
 80013a6:	4613      	mov	r3, r2
 80013a8:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	8af9      	ldrh	r1, [r7, #22]
 80013c0:	f241 3488 	movw	r4, #5000	@ 0x1388
 80013c4:	9402      	str	r4, [sp, #8]
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	f002 f84d 	bl	800346c <HAL_I2C_Mem_Read>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <read_data+0x46>
		return 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	e000      	b.n	80013de <read_data+0x48>
	else
		return 1;
 80013dc:	2301      	movs	r3, #1

}
 80013de:	4618      	mov	r0, r3
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}

080013e6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2188      	movs	r1, #136	@ 0x88
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff9e 	bl	8001336 <read_register16>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d06f      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3302      	adds	r3, #2
 8001404:	461a      	mov	r2, r3
 8001406:	218a      	movs	r1, #138	@ 0x8a
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff94 	bl	8001336 <read_register16>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d065      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3304      	adds	r3, #4
 8001418:	461a      	mov	r2, r3
 800141a:	218c      	movs	r1, #140	@ 0x8c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff8a 	bl	8001336 <read_register16>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d05b      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3306      	adds	r3, #6
 800142c:	461a      	mov	r2, r3
 800142e:	218e      	movs	r1, #142	@ 0x8e
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff80 	bl	8001336 <read_register16>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d051      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3308      	adds	r3, #8
 8001440:	461a      	mov	r2, r3
 8001442:	2190      	movs	r1, #144	@ 0x90
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff76 	bl	8001336 <read_register16>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d047      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	330a      	adds	r3, #10
 8001454:	461a      	mov	r2, r3
 8001456:	2192      	movs	r1, #146	@ 0x92
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff6c 	bl	8001336 <read_register16>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d03d      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	330c      	adds	r3, #12
 8001468:	461a      	mov	r2, r3
 800146a:	2194      	movs	r1, #148	@ 0x94
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff62 	bl	8001336 <read_register16>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d033      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	330e      	adds	r3, #14
 800147c:	461a      	mov	r2, r3
 800147e:	2196      	movs	r1, #150	@ 0x96
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff58 	bl	8001336 <read_register16>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d029      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3310      	adds	r3, #16
 8001490:	461a      	mov	r2, r3
 8001492:	2198      	movs	r1, #152	@ 0x98
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff4e 	bl	8001336 <read_register16>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01f      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3312      	adds	r3, #18
 80014a4:	461a      	mov	r2, r3
 80014a6:	219a      	movs	r1, #154	@ 0x9a
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff44 	bl	8001336 <read_register16>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d015      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3314      	adds	r3, #20
 80014b8:	461a      	mov	r2, r3
 80014ba:	219c      	movs	r1, #156	@ 0x9c
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff3a 	bl	8001336 <read_register16>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80014cc:	461a      	mov	r2, r3
 80014ce:	219e      	movs	r1, #158	@ 0x9e
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff30 	bl	8001336 <read_register16>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <read_calibration_data+0xfa>

		return true;
 80014dc:	2301      	movs	r3, #1
 80014de:	e000      	b.n	80014e2 <read_calibration_data+0xfc>
	}

	return false;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b084      	sub	sp, #16
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f103 0218 	add.w	r2, r3, #24
 80014f8:	2301      	movs	r3, #1
 80014fa:	21a1      	movs	r1, #161	@ 0xa1
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff4a 	bl	8001396 <read_data>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d14c      	bne.n	80015a2 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	331a      	adds	r3, #26
 800150c:	461a      	mov	r2, r3
 800150e:	21e1      	movs	r1, #225	@ 0xe1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff10 	bl	8001336 <read_register16>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d042      	beq.n	80015a2 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 021c 	add.w	r2, r3, #28
 8001522:	2301      	movs	r3, #1
 8001524:	21e3      	movs	r1, #227	@ 0xe3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ff35 	bl	8001396 <read_data>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d137      	bne.n	80015a2 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8001532:	f107 030e 	add.w	r3, r7, #14
 8001536:	461a      	mov	r2, r3
 8001538:	21e4      	movs	r1, #228	@ 0xe4
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff fefb 	bl	8001336 <read_register16>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d02d      	beq.n	80015a2 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8001546:	f107 030c 	add.w	r3, r7, #12
 800154a:	461a      	mov	r2, r3
 800154c:	21e5      	movs	r1, #229	@ 0xe5
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff fef1 	bl	8001336 <read_register16>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d023      	beq.n	80015a2 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001560:	2301      	movs	r3, #1
 8001562:	21e7      	movs	r1, #231	@ 0xe7
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff16 	bl	8001396 <read_data>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d118      	bne.n	80015a2 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001570:	89fb      	ldrh	r3, [r7, #14]
 8001572:	b21b      	sxth	r3, r3
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	b21b      	sxth	r3, r3
 8001578:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800157c:	b21a      	sxth	r2, r3
 800157e:	89fb      	ldrh	r3, [r7, #14]
 8001580:	121b      	asrs	r3, r3, #8
 8001582:	b21b      	sxth	r3, r3
 8001584:	f003 030f 	and.w	r3, r3, #15
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	b21a      	sxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001592:	89bb      	ldrh	r3, [r7, #12]
 8001594:	091b      	lsrs	r3, r3, #4
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21a      	sxth	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	841a      	strh	r2, [r3, #32]

		return true;
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <read_hum_calibration_data+0xba>
	}

	return false;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af04      	add	r7, sp, #16
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	4613      	mov	r3, r2
 80015ba:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	89f9      	ldrh	r1, [r7, #14]
 80015ce:	f242 7310 	movw	r3, #10000	@ 0x2710
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	2301      	movs	r3, #1
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2301      	movs	r3, #1
 80015de:	f001 fe31 	bl	8003244 <HAL_I2C_Mem_Write>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <write_register8+0x40>
		return false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e000      	b.n	80015ee <write_register8+0x42>
	else
		return true;
 80015ec:	2301      	movs	r3, #1
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001604:	2b76      	cmp	r3, #118	@ 0x76
 8001606:	d005      	beq.n	8001614 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800160c:	2b77      	cmp	r3, #119	@ 0x77
 800160e:	d001      	beq.n	8001614 <bmp280_init+0x1e>

		return false;
 8001610:	2300      	movs	r3, #0
 8001612:	e09d      	b.n	8001750 <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800161a:	2301      	movs	r3, #1
 800161c:	21d0      	movs	r1, #208	@ 0xd0
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff feb9 	bl	8001396 <read_data>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <bmp280_init+0x38>
		return false;
 800162a:	2300      	movs	r3, #0
 800162c:	e090      	b.n	8001750 <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001634:	2b58      	cmp	r3, #88	@ 0x58
 8001636:	d006      	beq.n	8001646 <bmp280_init+0x50>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800163e:	2b60      	cmp	r3, #96	@ 0x60
 8001640:	d001      	beq.n	8001646 <bmp280_init+0x50>

		return false;
 8001642:	2300      	movs	r3, #0
 8001644:	e084      	b.n	8001750 <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001646:	22b6      	movs	r2, #182	@ 0xb6
 8001648:	21e0      	movs	r1, #224	@ 0xe0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffae 	bl	80015ac <write_register8>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <bmp280_init+0x64>
		return false;
 8001656:	2300      	movs	r3, #0
 8001658:	e07a      	b.n	8001750 <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800165a:	f107 020c 	add.w	r2, r7, #12
 800165e:	2301      	movs	r3, #1
 8001660:	21f3      	movs	r1, #243	@ 0xf3
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff fe97 	bl	8001396 <read_data>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f5      	bne.n	800165a <bmp280_init+0x64>
				&& (status & 1) == 0)
 800166e:	7b3b      	ldrb	r3, [r7, #12]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff feb4 	bl	80013e6 <read_calibration_data>
 800167e:	4603      	mov	r3, r0
 8001680:	f083 0301 	eor.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d100      	bne.n	800168c <bmp280_init+0x96>
 800168a:	e001      	b.n	8001690 <bmp280_init+0x9a>
		return false;
 800168c:	2300      	movs	r3, #0
 800168e:	e05f      	b.n	8001750 <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001696:	2b60      	cmp	r3, #96	@ 0x60
 8001698:	d10a      	bne.n	80016b0 <bmp280_init+0xba>
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff25 	bl	80014ea <read_hum_calibration_data>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <bmp280_init+0xba>
		return false;
 80016ac:	2300      	movs	r3, #0
 80016ae:	e04f      	b.n	8001750 <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b25b      	sxtb	r3, r3
 80016c8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	461a      	mov	r2, r3
 80016ce:	21f5      	movs	r1, #245	@ 0xf5
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff6b 	bl	80015ac <write_register8>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <bmp280_init+0xea>
		return false;
 80016dc:	2300      	movs	r3, #0
 80016de:	e037      	b.n	8001750 <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d102      	bne.n	80016ee <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	015b      	lsls	r3, r3, #5
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	b25a      	sxtb	r2, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001710:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001718:	2b60      	cmp	r3, #96	@ 0x60
 800171a:	d10d      	bne.n	8001738 <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	791b      	ldrb	r3, [r3, #4]
 8001720:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001722:	7b7b      	ldrb	r3, [r7, #13]
 8001724:	461a      	mov	r2, r3
 8001726:	21f2      	movs	r1, #242	@ 0xf2
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff3f 	bl	80015ac <write_register8>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <bmp280_init+0x142>
			return false;
 8001734:	2300      	movs	r3, #0
 8001736:	e00b      	b.n	8001750 <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	461a      	mov	r2, r3
 800173c:	21f4      	movs	r1, #244	@ 0xf4
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ff34 	bl	80015ac <write_register8>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <bmp280_init+0x158>
		return false;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <bmp280_init+0x15a>
	}

	return true;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	10da      	asrs	r2, r3, #3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001776:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800177a:	12db      	asrs	r3, r3, #11
 800177c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	111b      	asrs	r3, r3, #4
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	8812      	ldrh	r2, [r2, #0]
 8001786:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	1112      	asrs	r2, r2, #4
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	8809      	ldrh	r1, [r1, #0]
 8001790:	1a52      	subs	r2, r2, r1
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80017a2:	139b      	asrs	r3, r3, #14
 80017a4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	441a      	add	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	3380      	adds	r3, #128	@ 0x80
 80017bc:	121b      	asrs	r3, r3, #8
}
 80017be:	4618      	mov	r0, r3
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b0cc      	sub	sp, #304	@ 0x130
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80017d4:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80017d8:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80017dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017e0:	17da      	asrs	r2, r3, #31
 80017e2:	461c      	mov	r4, r3
 80017e4:	4615      	mov	r5, r2
 80017e6:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80017ea:	f145 3bff 	adc.w	fp, r5, #4294967295
 80017ee:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80017f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017fa:	fb03 f102 	mul.w	r1, r3, r2
 80017fe:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001802:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	18ca      	adds	r2, r1, r3
 800180c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001810:	fba3 8903 	umull	r8, r9, r3, r3
 8001814:	eb02 0309 	add.w	r3, r2, r9
 8001818:	4699      	mov	r9, r3
 800181a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800181e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001822:	b21b      	sxth	r3, r3
 8001824:	17da      	asrs	r2, r3, #31
 8001826:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800182a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800182e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001832:	4603      	mov	r3, r0
 8001834:	fb03 f209 	mul.w	r2, r3, r9
 8001838:	460b      	mov	r3, r1
 800183a:	fb08 f303 	mul.w	r3, r8, r3
 800183e:	4413      	add	r3, r2
 8001840:	4602      	mov	r2, r0
 8001842:	fba8 2102 	umull	r2, r1, r8, r2
 8001846:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800184a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800184e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001852:	4413      	add	r3, r2
 8001854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001858:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800185c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001860:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001868:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800186c:	b21b      	sxth	r3, r3
 800186e:	17da      	asrs	r2, r3, #31
 8001870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001874:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800187c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001880:	462a      	mov	r2, r5
 8001882:	fb02 f203 	mul.w	r2, r2, r3
 8001886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800188a:	4621      	mov	r1, r4
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	441a      	add	r2, r3
 8001892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001896:	4621      	mov	r1, r4
 8001898:	fba3 3101 	umull	r3, r1, r3, r1
 800189c:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80018a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80018a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80018a8:	18d3      	adds	r3, r2, r3
 80018aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80018ae:	f04f 0000 	mov.w	r0, #0
 80018b2:	f04f 0100 	mov.w	r1, #0
 80018b6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80018ba:	462b      	mov	r3, r5
 80018bc:	0459      	lsls	r1, r3, #17
 80018be:	4622      	mov	r2, r4
 80018c0:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80018c4:	4623      	mov	r3, r4
 80018c6:	0458      	lsls	r0, r3, #17
 80018c8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018cc:	1814      	adds	r4, r2, r0
 80018ce:	643c      	str	r4, [r7, #64]	@ 0x40
 80018d0:	414b      	adcs	r3, r1
 80018d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80018d4:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80018d8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80018dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	17da      	asrs	r2, r3, #31
 80018e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80018ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80018f0:	f04f 0000 	mov.w	r0, #0
 80018f4:	f04f 0100 	mov.w	r1, #0
 80018f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018fc:	00d9      	lsls	r1, r3, #3
 80018fe:	2000      	movs	r0, #0
 8001900:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001904:	1814      	adds	r4, r2, r0
 8001906:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001908:	414b      	adcs	r3, r1
 800190a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800190c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001910:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001914:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001918:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800191c:	fb03 f102 	mul.w	r1, r3, r2
 8001920:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001924:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	18ca      	adds	r2, r1, r3
 800192e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001932:	fba3 3103 	umull	r3, r1, r3, r3
 8001936:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 800193a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800193e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800194c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001950:	b21b      	sxth	r3, r3
 8001952:	17da      	asrs	r2, r3, #31
 8001954:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001958:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800195c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001960:	4622      	mov	r2, r4
 8001962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001966:	4641      	mov	r1, r8
 8001968:	fb01 f202 	mul.w	r2, r1, r2
 800196c:	464d      	mov	r5, r9
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	4603      	mov	r3, r0
 8001974:	fb03 f305 	mul.w	r3, r3, r5
 8001978:	4413      	add	r3, r2
 800197a:	4602      	mov	r2, r0
 800197c:	4641      	mov	r1, r8
 800197e:	fba2 2101 	umull	r2, r1, r2, r1
 8001982:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001986:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800198a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800198e:	4413      	add	r3, r2
 8001990:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001994:	f04f 0000 	mov.w	r0, #0
 8001998:	f04f 0100 	mov.w	r1, #0
 800199c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80019a0:	4623      	mov	r3, r4
 80019a2:	0a18      	lsrs	r0, r3, #8
 80019a4:	462a      	mov	r2, r5
 80019a6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80019aa:	462b      	mov	r3, r5
 80019ac:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80019ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	17da      	asrs	r2, r3, #31
 80019ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80019be:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80019c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019c6:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80019ca:	464a      	mov	r2, r9
 80019cc:	fb02 f203 	mul.w	r2, r2, r3
 80019d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019d4:	4644      	mov	r4, r8
 80019d6:	fb04 f303 	mul.w	r3, r4, r3
 80019da:	441a      	add	r2, r3
 80019dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019e0:	4644      	mov	r4, r8
 80019e2:	fba3 3404 	umull	r3, r4, r3, r4
 80019e6:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 80019ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80019ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80019f2:	18d3      	adds	r3, r2, r3
 80019f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001a04:	464c      	mov	r4, r9
 8001a06:	0323      	lsls	r3, r4, #12
 8001a08:	46c4      	mov	ip, r8
 8001a0a:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001a0e:	4644      	mov	r4, r8
 8001a10:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a12:	1884      	adds	r4, r0, r2
 8001a14:	633c      	str	r4, [r7, #48]	@ 0x30
 8001a16:	eb41 0303 	adc.w	r3, r1, r3
 8001a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a1c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001a20:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001a24:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a28:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001a2c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001a30:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a38:	88db      	ldrh	r3, [r3, #6]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a42:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a46:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001a50:	4641      	mov	r1, r8
 8001a52:	fb01 f202 	mul.w	r2, r1, r2
 8001a56:	464d      	mov	r5, r9
 8001a58:	4618      	mov	r0, r3
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	fb03 f305 	mul.w	r3, r3, r5
 8001a62:	4413      	add	r3, r2
 8001a64:	4602      	mov	r2, r0
 8001a66:	4641      	mov	r1, r8
 8001a68:	fba2 2101 	umull	r2, r1, r2, r1
 8001a6c:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001a70:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001a74:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001a78:	4413      	add	r3, r2
 8001a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	104a      	asrs	r2, r1, #1
 8001a8e:	4629      	mov	r1, r5
 8001a90:	17cb      	asrs	r3, r1, #31
 8001a92:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001a96:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e146      	b.n	8001d30 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001aa6:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ab0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001ab4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001ab8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001abc:	105b      	asrs	r3, r3, #1
 8001abe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001ac2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ac6:	07db      	lsls	r3, r3, #31
 8001ac8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001acc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ad0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	1aa4      	subs	r4, r4, r2
 8001ad8:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001ada:	eb61 0303 	sbc.w	r3, r1, r3
 8001ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ae0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	462b      	mov	r3, r5
 8001ae8:	1891      	adds	r1, r2, r2
 8001aea:	6239      	str	r1, [r7, #32]
 8001aec:	415b      	adcs	r3, r3
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001af4:	4621      	mov	r1, r4
 8001af6:	1851      	adds	r1, r2, r1
 8001af8:	61b9      	str	r1, [r7, #24]
 8001afa:	4629      	mov	r1, r5
 8001afc:	414b      	adcs	r3, r1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	018b      	lsls	r3, r1, #6
 8001b10:	4641      	mov	r1, r8
 8001b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b16:	4641      	mov	r1, r8
 8001b18:	018a      	lsls	r2, r1, #6
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	1889      	adds	r1, r1, r2
 8001b1e:	6139      	str	r1, [r7, #16]
 8001b20:	4649      	mov	r1, r9
 8001b22:	eb43 0101 	adc.w	r1, r3, r1
 8001b26:	6179      	str	r1, [r7, #20]
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001b34:	4649      	mov	r1, r9
 8001b36:	008b      	lsls	r3, r1, #2
 8001b38:	46c4      	mov	ip, r8
 8001b3a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b3e:	4641      	mov	r1, r8
 8001b40:	008a      	lsls	r2, r1, #2
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	4622      	mov	r2, r4
 8001b4a:	189b      	adds	r3, r3, r2
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	462a      	mov	r2, r5
 8001b52:	eb42 0303 	adc.w	r3, r2, r3
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001b64:	4649      	mov	r1, r9
 8001b66:	008b      	lsls	r3, r1, #2
 8001b68:	46c4      	mov	ip, r8
 8001b6a:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001b6e:	4641      	mov	r1, r8
 8001b70:	008a      	lsls	r2, r1, #2
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	4622      	mov	r2, r4
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b7e:	462b      	mov	r3, r5
 8001b80:	460a      	mov	r2, r1
 8001b82:	eb42 0303 	adc.w	r3, r2, r3
 8001b86:	677b      	str	r3, [r7, #116]	@ 0x74
 8001b88:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b90:	f7ff f96e 	bl	8000e70 <__aeabi_ldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ba0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	17da      	asrs	r2, r3, #31
 8001ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001baa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001bac:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	0b50      	lsrs	r0, r2, #13
 8001bba:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bbe:	1359      	asrs	r1, r3, #13
 8001bc0:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	fb00 f203 	mul.w	r2, r0, r3
 8001bca:	4623      	mov	r3, r4
 8001bcc:	fb03 f301 	mul.w	r3, r3, r1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	fba2 2100 	umull	r2, r1, r2, r0
 8001bd8:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001bdc:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001be0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001be4:	4413      	add	r3, r2
 8001be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001bea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0b50      	lsrs	r0, r2, #13
 8001bf8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001bfc:	1359      	asrs	r1, r3, #13
 8001bfe:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001c02:	462b      	mov	r3, r5
 8001c04:	fb00 f203 	mul.w	r2, r0, r3
 8001c08:	4623      	mov	r3, r4
 8001c0a:	fb03 f301 	mul.w	r3, r3, r1
 8001c0e:	4413      	add	r3, r2
 8001c10:	4622      	mov	r2, r4
 8001c12:	fba2 2100 	umull	r2, r1, r2, r0
 8001c16:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001c1a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001c1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001c22:	4413      	add	r3, r2
 8001c24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001c34:	4621      	mov	r1, r4
 8001c36:	0e4a      	lsrs	r2, r1, #25
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001c42:	164b      	asrs	r3, r1, #25
 8001c44:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c4c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	17da      	asrs	r2, r3, #31
 8001c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c56:	667a      	str	r2, [r7, #100]	@ 0x64
 8001c58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c5c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c60:	462a      	mov	r2, r5
 8001c62:	fb02 f203 	mul.w	r2, r2, r3
 8001c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001c76:	4621      	mov	r1, r4
 8001c78:	fba2 2101 	umull	r2, r1, r2, r1
 8001c7c:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001c80:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001c84:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001c88:	4413      	add	r3, r2
 8001c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	0cca      	lsrs	r2, r1, #19
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001ca8:	14cb      	asrs	r3, r1, #19
 8001caa:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001cae:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001cb2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001cb6:	1884      	adds	r4, r0, r2
 8001cb8:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001cba:	eb41 0303 	adc.w	r3, r1, r3
 8001cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cc0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cc4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001cc8:	4621      	mov	r1, r4
 8001cca:	1889      	adds	r1, r1, r2
 8001ccc:	6539      	str	r1, [r7, #80]	@ 0x50
 8001cce:	4629      	mov	r1, r5
 8001cd0:	eb43 0101 	adc.w	r1, r3, r1
 8001cd4:	6579      	str	r1, [r7, #84]	@ 0x54
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	0a18      	lsrs	r0, r3, #8
 8001ce6:	462a      	mov	r2, r5
 8001ce8:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001cec:	462b      	mov	r3, r5
 8001cee:	1219      	asrs	r1, r3, #8
 8001cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001cf4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	17da      	asrs	r2, r3, #31
 8001cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cfe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001d0c:	464c      	mov	r4, r9
 8001d0e:	0123      	lsls	r3, r4, #4
 8001d10:	46c4      	mov	ip, r8
 8001d12:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001d16:	4644      	mov	r4, r8
 8001d18:	0122      	lsls	r2, r4, #4
 8001d1a:	1884      	adds	r4, r0, r2
 8001d1c:	603c      	str	r4, [r7, #0]
 8001d1e:	eb41 0303 	adc.w	r3, r1, r3
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d28:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001d2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001d36:	46bd      	mov	sp, r7
 8001d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001d3c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001d4e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	039a      	lsls	r2, r3, #14
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001d5a:	051b      	lsls	r3, r3, #20
 8001d5c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d64:	4619      	mov	r1, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001d72:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	fb01 f202 	mul.w	r2, r1, r2
 8001d82:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	7f09      	ldrb	r1, [r1, #28]
 8001d88:	4608      	mov	r0, r1
 8001d8a:	6979      	ldr	r1, [r7, #20]
 8001d8c:	fb00 f101 	mul.w	r1, r0, r1
 8001d90:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001d92:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001d96:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001d9a:	1292      	asrs	r2, r2, #10
 8001d9c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001da6:	fb01 f202 	mul.w	r2, r1, r2
 8001daa:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001dae:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001db0:	fb02 f303 	mul.w	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	13db      	asrs	r3, r3, #15
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	13d2      	asrs	r2, r2, #15
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	7e12      	ldrb	r2, [r2, #24]
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001dda:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001de2:	bfa8      	it	ge
 8001de4:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001de8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	131b      	asrs	r3, r3, #12
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001e0c:	2b60      	cmp	r3, #96	@ 0x60
 8001e0e:	d007      	beq.n	8001e20 <bmp280_read_fixed+0x28>
		if (humidity)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <bmp280_read_fixed+0x32>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e000      	b.n	8001e2c <bmp280_read_fixed+0x34>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f107 0218 	add.w	r2, r7, #24
 8001e36:	21f7      	movs	r1, #247	@ 0xf7
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f7ff faac 	bl	8001396 <read_data>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <bmp280_read_fixed+0x50>
		return false;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e038      	b.n	8001eba <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001e48:	7e3b      	ldrb	r3, [r7, #24]
 8001e4a:	031a      	lsls	r2, r3, #12
 8001e4c:	7e7b      	ldrb	r3, [r7, #25]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4313      	orrs	r3, r2
 8001e52:	7eba      	ldrb	r2, [r7, #26]
 8001e54:	0912      	lsrs	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001e5c:	7efb      	ldrb	r3, [r7, #27]
 8001e5e:	031a      	lsls	r2, r3, #12
 8001e60:	7f3b      	ldrb	r3, [r7, #28]
 8001e62:	011b      	lsls	r3, r3, #4
 8001e64:	4313      	orrs	r3, r2
 8001e66:	7f7a      	ldrb	r2, [r7, #29]
 8001e68:	0912      	lsrs	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	461a      	mov	r2, r3
 8001e76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fc6d 	bl	8001758 <compensate_temperature>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	461a      	mov	r2, r3
 8001e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f7ff fc9c 	bl	80017c8 <compensate_pressure>
 8001e90:	4602      	mov	r2, r0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00d      	beq.n	8001eb8 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001e9c:	7fbb      	ldrb	r3, [r7, #30]
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	7ffa      	ldrb	r2, [r7, #31]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	6a39      	ldr	r1, [r7, #32]
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff ff45 	bl	8001d3c <compensate_humidity>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3730      	adds	r7, #48	@ 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <bmp280_read_float+0x1a>
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	e000      	b.n	8001ee0 <bmp280_read_float+0x1c>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f107 0218 	add.w	r2, r7, #24
 8001ee4:	f107 011c 	add.w	r1, r7, #28
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff ff85 	bl	8001df8 <bmp280_read_fixed>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d02d      	beq.n	8001f50 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fe16 	bl	8000b28 <__aeabi_i2f>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4917      	ldr	r1, [pc, #92]	@ (8001f5c <bmp280_read_float+0x98>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe ff19 	bl	8000d38 <__aeabi_fdiv>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fe05 	bl	8000b20 <__aeabi_ui2f>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe ff0b 	bl	8000d38 <__aeabi_fdiv>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	601a      	str	r2, [r3, #0]
		if (humidity)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fdf4 	bl	8000b20 <__aeabi_ui2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fefa 	bl	8000d38 <__aeabi_fdiv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]
		return true;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <bmp280_read_float+0x8e>
	}

	return false;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	42c80000 	.word	0x42c80000

08001f60 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f84:	68fb      	ldr	r3, [r7, #12]
}
 8001f86:	bf00      	nop
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	@ 0x38
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f96:	f000 fbb9 	bl	800270c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9a:	f000 f8a1 	bl	80020e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f9e:	f000 f931 	bl	8002204 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001fa2:	f000 f8ef 	bl	8002184 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb0:	f000 fe88 	bl	8002cc4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
  Sensor_Data sData;
  SHT40_Measurement measurement;
  LM75_Data result;

  if (LM75ADP_conf(&hi2c2, LM75ADP_I2C_TIMEOUT) != HAL_OK) {
 8001fb4:	2164      	movs	r1, #100	@ 0x64
 8001fb6:	4844      	ldr	r0, [pc, #272]	@ (80020c8 <main+0x138>)
 8001fb8:	f7ff f928 	bl	800120c <LM75ADP_conf>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <main+0x38>
	  sData.Okay = false;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  }

  uint32_t sht40_serial;
  if (SHT40_ReadSerial(&hi2c2, &sht40_serial) != HAL_OK ) {
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	483e      	ldr	r0, [pc, #248]	@ (80020c8 <main+0x138>)
 8001fce:	f000 f967 	bl	80022a0 <SHT40_ReadSerial>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <main+0x4e>
	  sData.Okay = false;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  }

  bmp280_init_default_params(&bmp280.params);
 8001fde:	483b      	ldr	r0, [pc, #236]	@ (80020cc <main+0x13c>)
 8001fe0:	f7ff f98e 	bl	8001300 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001fe4:	4b3a      	ldr	r3, [pc, #232]	@ (80020d0 <main+0x140>)
 8001fe6:	2276      	movs	r2, #118	@ 0x76
 8001fe8:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c2;
 8001fea:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <main+0x140>)
 8001fec:	4a36      	ldr	r2, [pc, #216]	@ (80020c8 <main+0x138>)
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28
  int try_count = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	@ 0x34

  while (!bmp280_init(&bmp280, &bmp280.params) && sData.Okay) {
 8001ff4:	e00d      	b.n	8002012 <main+0x82>
	  sData.Okay = (try_count++ < 5 );
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	637a      	str	r2, [r7, #52]	@ 0x34
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	bfd4      	ite	le
 8002000:	2301      	movle	r3, #1
 8002002:	2300      	movgt	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	  HAL_Delay(FIVE_SECONDS_MS);
 800200a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800200e:	f000 fbf3 	bl	80027f8 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params) && sData.Okay) {
 8002012:	492e      	ldr	r1, [pc, #184]	@ (80020cc <main+0x13c>)
 8002014:	482e      	ldr	r0, [pc, #184]	@ (80020d0 <main+0x140>)
 8002016:	f7ff faee 	bl	80015f6 <bmp280_init>
 800201a:	4603      	mov	r3, r0
 800201c:	f083 0301 	eor.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <main+0x9e>
 8002026:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1e3      	bne.n	8001ff6 <main+0x66>
  }
  //bool bme280p = bmp280.id == BME280_CHIP_ID;

  HAL_Delay(FIVE_SECONDS_MS);
 800202e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002032:	f000 fbe1 	bl	80027f8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Set PA9 to HIGH

  while (sData.Okay)
 8002036:	e03e      	b.n	80020b6 <main+0x126>
  {
	  // Temporary code will move to Lora network just need to import and get it working .... hopefully


	  if (LM75ADP_read(&hi2c2, &result, LM75ADP_I2C_TIMEOUT) != HAL_OK) {
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	2264      	movs	r2, #100	@ 0x64
 800203e:	4619      	mov	r1, r3
 8002040:	4821      	ldr	r0, [pc, #132]	@ (80020c8 <main+0x138>)
 8002042:	f7ff f903 	bl	800124c <LM75ADP_read>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <main+0xc4>
		sData.Okay = false;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002052:	e001      	b.n	8002058 <main+0xc8>
	  } else {
		sData.LM75ADP_f_temperature = result.f_temp;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	61bb      	str	r3, [r7, #24]
	  }

	  if( SHT40_Measure(&hi2c2, &measurement, MED_PRECISION) != HAL_OK ) {
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	22f6      	movs	r2, #246	@ 0xf6
 800205e:	4619      	mov	r1, r3
 8002060:	4819      	ldr	r0, [pc, #100]	@ (80020c8 <main+0x138>)
 8002062:	f000 f8ff 	bl	8002264 <SHT40_Measure>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <main+0xe4>
		sData.Okay = false;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002072:	e003      	b.n	800207c <main+0xec>
	  } else {
		sData.sht40_f_relhumidity = measurement.rel_humidity;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	623b      	str	r3, [r7, #32]
		sData.sht40_f_temperature = measurement.temperature;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	61fb      	str	r3, [r7, #28]
	  }

	  if (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <main+0x144>)
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <main+0x148>)
 8002080:	4916      	ldr	r1, [pc, #88]	@ (80020dc <main+0x14c>)
 8002082:	4813      	ldr	r0, [pc, #76]	@ (80020d0 <main+0x140>)
 8002084:	f7ff ff1e 	bl	8001ec4 <bmp280_read_float>
 8002088:	4603      	mov	r3, r0
 800208a:	f083 0301 	eor.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <main+0x10c>
		sData.Okay = false;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800209a:	e008      	b.n	80020ae <main+0x11e>
	  } else {
		sData.BMP280_f_humidity = humidity;
 800209c:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <main+0x144>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sData.BMP280_f_pressure = pressure;
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <main+0x148>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
		sData.BMP280_f_temperature = temperature;
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <main+0x14c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
	  }

	  HAL_Delay(FIVE_SECONDS_MS);
 80020ae:	f241 3088 	movw	r0, #5000	@ 0x1388
 80020b2:	f000 fba1 	bl	80027f8 <HAL_Delay>
  while (sData.Okay)
 80020b6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1bc      	bne.n	8002038 <main+0xa8>
 80020be:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3738      	adds	r7, #56	@ 0x38
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000038 	.word	0x20000038
 80020cc:	200000b8 	.word	0x200000b8
 80020d0:	2000008c 	.word	0x2000008c
 80020d4:	200000c8 	.word	0x200000c8
 80020d8:	200000c0 	.word	0x200000c0
 80020dc:	200000c4 	.word	0x200000c4

080020e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b09a      	sub	sp, #104	@ 0x68
 80020e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e6:	f107 0320 	add.w	r3, r7, #32
 80020ea:	2248      	movs	r2, #72	@ 0x48
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 f964 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f4:	f107 0308 	add.w	r3, r7, #8
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
 8002104:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002106:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <SystemClock_Config+0xa0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <SystemClock_Config+0xa0>)
 8002110:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <SystemClock_Config+0xa0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002122:	2320      	movs	r3, #32
 8002124:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002126:	2301      	movs	r3, #1
 8002128:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800212a:	2300      	movs	r3, #0
 800212c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800212e:	2360      	movs	r3, #96	@ 0x60
 8002130:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002132:	2300      	movs	r3, #0
 8002134:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	4618      	mov	r0, r3
 800213c:	f002 f924 	bl	8004388 <HAL_RCC_OscConfig>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002146:	f000 f887 	bl	8002258 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800214a:	234f      	movs	r3, #79	@ 0x4f
 800214c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f002 fc8f 	bl	8004a8c <HAL_RCC_ClockConfig>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002174:	f000 f870 	bl	8002258 <Error_Handler>
  }
}
 8002178:	bf00      	nop
 800217a:	3768      	adds	r7, #104	@ 0x68
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	58000400 	.word	0x58000400

08002184 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <MX_I2C2_Init+0x74>)
 800218a:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <MX_I2C2_Init+0x78>)
 800218c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 800218e:	4b1a      	ldr	r3, [pc, #104]	@ (80021f8 <MX_I2C2_Init+0x74>)
 8002190:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <MX_I2C2_Init+0x7c>)
 8002192:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002194:	4b18      	ldr	r3, [pc, #96]	@ (80021f8 <MX_I2C2_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219a:	4b17      	ldr	r3, [pc, #92]	@ (80021f8 <MX_I2C2_Init+0x74>)
 800219c:	2201      	movs	r2, #1
 800219e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80021a6:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021be:	480e      	ldr	r0, [pc, #56]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021c0:	f000 fd97 	bl	8002cf2 <HAL_I2C_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80021ca:	f000 f845 	bl	8002258 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4809      	ldr	r0, [pc, #36]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021d2:	f001 fdaf 	bl	8003d34 <HAL_I2CEx_ConfigAnalogFilter>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80021dc:	f000 f83c 	bl	8002258 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021e0:	2100      	movs	r1, #0
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <MX_I2C2_Init+0x74>)
 80021e4:	f001 fdf0 	bl	8003dc8 <HAL_I2CEx_ConfigDigitalFilter>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80021ee:	f000 f833 	bl	8002258 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000038 	.word	0x20000038
 80021fc:	40005800 	.word	0x40005800
 8002200:	00100d14 	.word	0x00100d14

08002204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fea1 	bl	8001f60 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2002      	movs	r0, #2
 8002220:	f7ff fe9e 	bl	8001f60 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800222a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800222e:	f000 fd49 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	4619      	mov	r1, r3
 8002248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800224c:	f000 fbda 	bl	8002a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800225c:	b672      	cpsid	i
}
 800225e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <Error_Handler+0x8>

08002264 <SHT40_Measure>:
};

/*
 * Measurement-Taking
 */
HAL_StatusTypeDef SHT40_Measure(I2C_HandleTypeDef* i2cHandle, SHT40_Measurement* result, SHT40_Precision precision) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	71fb      	strb	r3, [r7, #7]
    uint8_t response[6];
    if (i2c_communicate(i2cHandle, (uint8_t*)&precision, response) == HAL_OK) {
 8002272:	f107 0210 	add.w	r2, r7, #16
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	4619      	mov	r1, r3
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f87a 	bl	8002374 <i2c_communicate>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d107      	bne.n	8002296 <SHT40_Measure+0x32>
        return read_temp_humidity(response, result);
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	4618      	mov	r0, r3
 800228e:	f000 f899 	bl	80023c4 <read_temp_humidity>
 8002292:	4603      	mov	r3, r0
 8002294:	e000      	b.n	8002298 <SHT40_Measure+0x34>
    }
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SHT40_ReadSerial>:
}

/*
 * Serial
 */
HAL_StatusTypeDef SHT40_ReadSerial(I2C_HandleTypeDef* i2cHandle, uint32_t* result) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
    static uint8_t COMMAND = SHT40_READ_SERIAL;
    uint8_t serial_response[6];

    if( i2c_communicate(i2cHandle, &COMMAND, serial_response) == HAL_OK ) {
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	461a      	mov	r2, r3
 80022b0:	491b      	ldr	r1, [pc, #108]	@ (8002320 <SHT40_ReadSerial+0x80>)
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f85e 	bl	8002374 <i2c_communicate>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d12b      	bne.n	8002316 <SHT40_ReadSerial+0x76>
        uint16_t serial_msb = serial_response[0] << 8 | serial_response[1];
 80022be:	7b3b      	ldrb	r3, [r7, #12]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	7b7b      	ldrb	r3, [r7, #13]
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	82fb      	strh	r3, [r7, #22]
        uint16_t serial_lsb = serial_response[3] << 8 | serial_response[4];
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	7c3b      	ldrb	r3, [r7, #16]
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21b      	sxth	r3, r3
 80022e0:	82bb      	strh	r3, [r7, #20]

        if( verify_checksum(serial_msb, serial_response[2]) && verify_checksum(serial_lsb, serial_response[5]) ) {
 80022e2:	7bba      	ldrb	r2, [r7, #14]
 80022e4:	8afb      	ldrh	r3, [r7, #22]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f81b 	bl	8002324 <verify_checksum>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <SHT40_ReadSerial+0x76>
 80022f4:	7c7a      	ldrb	r2, [r7, #17]
 80022f6:	8abb      	ldrh	r3, [r7, #20]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 f812 	bl	8002324 <verify_checksum>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d007      	beq.n	8002316 <SHT40_ReadSerial+0x76>
            *result = ((uint32_t)serial_msb << 16) | serial_lsb;
 8002306:	8afb      	ldrh	r3, [r7, #22]
 8002308:	041a      	lsls	r2, r3, #16
 800230a:	8abb      	ldrh	r3, [r7, #20]
 800230c:	431a      	orrs	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	601a      	str	r2, [r3, #0]
            return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <SHT40_ReadSerial+0x78>
        }
    }
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000000 	.word	0x20000000

08002324 <verify_checksum>:

/*
 * Returns whether the provided CRC8 checksum matches that
 * of the provided 16-bit data
 */
static bool verify_checksum(uint16_t data, uint8_t checksum) {
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	460a      	mov	r2, r1
 800232e:	80fb      	strh	r3, [r7, #6]
 8002330:	4613      	mov	r3, r2
 8002332:	717b      	strb	r3, [r7, #5]
    uint8_t calculated_crc = 0xFF;
 8002334:	23ff      	movs	r3, #255	@ 0xff
 8002336:	73fb      	strb	r3, [r7, #15]

    calculated_crc = CRC8_TABLE[calculated_crc ^ (data >> 8)];
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	0a12      	lsrs	r2, r2, #8
 800233e:	b292      	uxth	r2, r2
 8002340:	4053      	eors	r3, r2
 8002342:	4a0b      	ldr	r2, [pc, #44]	@ (8002370 <verify_checksum+0x4c>)
 8002344:	5cd3      	ldrb	r3, [r2, r3]
 8002346:	73fb      	strb	r3, [r7, #15]
    calculated_crc = CRC8_TABLE[calculated_crc ^ (data & 0xFF)];
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4053      	eors	r3, r2
 8002350:	4a07      	ldr	r2, [pc, #28]	@ (8002370 <verify_checksum+0x4c>)
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	73fb      	strb	r3, [r7, #15]

    return calculated_crc == checksum;
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	797b      	ldrb	r3, [r7, #5]
 800235a:	429a      	cmp	r2, r3
 800235c:	bf0c      	ite	eq
 800235e:	2301      	moveq	r3, #1
 8002360:	2300      	movne	r3, #0
 8002362:	b2db      	uxtb	r3, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	08005448 	.word	0x08005448

08002374 <i2c_communicate>:

/*
 * Common I2C communication function
 */
static HAL_StatusTypeDef i2c_communicate(I2C_HandleTypeDef* i2cHandle, uint8_t* dCommand, uint8_t* response) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
	uint32_t dSize = sizeof(*dCommand);
 8002380:	2301      	movs	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
    if( HAL_I2C_Master_Transmit(i2cHandle, SHT40_I2C_ADDR, dCommand, dSize, SHT40_I2C_TIMEOUT) != HAL_OK ) {
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	b29b      	uxth	r3, r3
 8002388:	2264      	movs	r2, #100	@ 0x64
 800238a:	9200      	str	r2, [sp, #0]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	2188      	movs	r1, #136	@ 0x88
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fd49 	bl	8002e28 <HAL_I2C_Master_Transmit>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <i2c_communicate+0x2c>
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e00d      	b.n	80023bc <i2c_communicate+0x48>
    } else if (HAL_I2C_Master_Receive(i2cHandle, SHT40_I2C_ADDR, response, SHT40_I2C_RESP_LEN, SHT40_I2C_TIMEOUT) != HAL_OK) {
 80023a0:	2364      	movs	r3, #100	@ 0x64
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	2306      	movs	r3, #6
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	2188      	movs	r1, #136	@ 0x88
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fe54 	bl	8003058 <HAL_I2C_Master_Receive>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <i2c_communicate+0x46>
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <i2c_communicate+0x48>
    }
    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <read_temp_humidity>:

/*
 * Read temperature and humidity from the I2C response
 */
static HAL_StatusTypeDef read_temp_humidity(uint8_t* response, SHT40_Measurement* result) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
    uint16_t temperature = response[0] << 8 | response[1];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3301      	adds	r3, #1
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	81fb      	strh	r3, [r7, #14]
    uint16_t humidity = response[3] << 8 | response[4];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	4313      	orrs	r3, r2
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	81bb      	strh	r3, [r7, #12]

    if( verify_checksum(temperature, response[2]) && verify_checksum(humidity, response[5]) ) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3302      	adds	r3, #2
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff8a 	bl	8002324 <verify_checksum>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01a      	beq.n	800244c <read_temp_humidity+0x88>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3305      	adds	r3, #5
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	89bb      	ldrh	r3, [r7, #12]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff7f 	bl	8002324 <verify_checksum>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00f      	beq.n	800244c <read_temp_humidity+0x88>
        result->temperature = hardware_to_celsius(temperature);
 800242c:	89fb      	ldrh	r3, [r7, #14]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f812 	bl	8002458 <hardware_to_celsius>
 8002434:	4602      	mov	r2, r0
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	601a      	str	r2, [r3, #0]
        result->rel_humidity = hardware_to_humidity_percentage(humidity);
 800243a:	89bb      	ldrh	r3, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f843 	bl	80024c8 <hardware_to_humidity_percentage>
 8002442:	4602      	mov	r2, r0
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	605a      	str	r2, [r3, #4]
        return HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <read_temp_humidity+0x8a>
    }
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <hardware_to_celsius>:

/*
 * Converts hardware representation of temperature to C
 */
static float hardware_to_celsius(uint16_t reading) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
    return -45.0 + 175.0 * (reading / 65535.0);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ffd9 	bl	800041c <__aeabi_i2d>
 800246a:	a311      	add	r3, pc, #68	@ (adr r3, 80024b0 <hardware_to_celsius+0x58>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fe f968 	bl	8000744 <__aeabi_ddiv>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	a30e      	add	r3, pc, #56	@ (adr r3, 80024b8 <hardware_to_celsius+0x60>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe f835 	bl	80004f0 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <hardware_to_celsius+0x68>)
 8002494:	f7fd fe74 	bl	8000180 <__aeabi_dsub>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fa38 	bl	8000914 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	00000000 	.word	0x00000000
 80024b4:	40efffe0 	.word	0x40efffe0
 80024b8:	00000000 	.word	0x00000000
 80024bc:	4065e000 	.word	0x4065e000
 80024c0:	40468000 	.word	0x40468000
 80024c4:	00000000 	.word	0x00000000

080024c8 <hardware_to_humidity_percentage>:

/*
 * Converts hardware representation of humidity to relative humidity as percentage
 */
static float hardware_to_humidity_percentage(uint16_t reading) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
    return -6.0 + 125.0 * (reading / 65535.0);
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ffa1 	bl	800041c <__aeabi_i2d>
 80024da:	a311      	add	r3, pc, #68	@ (adr r3, 8002520 <hardware_to_humidity_percentage+0x58>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f930 	bl	8000744 <__aeabi_ddiv>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <hardware_to_humidity_percentage+0x60>)
 80024f2:	f7fd fffd 	bl	80004f0 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <hardware_to_humidity_percentage+0x64>)
 8002504:	f7fd fe3c 	bl	8000180 <__aeabi_dsub>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f7fe fa00 	bl	8000914 <__aeabi_d2f>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	00000000 	.word	0x00000000
 8002524:	40efffe0 	.word	0x40efffe0
 8002528:	405f4000 	.word	0x405f4000
 800252c:	40180000 	.word	0x40180000

08002530 <LL_AHB2_GRP1_EnableClock>:
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800253c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800253e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4313      	orrs	r3, r2
 8002546:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800256e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4313      	orrs	r3, r2
 8002576:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002584:	68fb      	ldr	r3, [r7, #12]
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b096      	sub	sp, #88	@ 0x58
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	2238      	movs	r2, #56	@ 0x38
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 fefd 	bl	80053bc <memset>
  if(hi2c->Instance==I2C2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a21      	ldr	r2, [pc, #132]	@ (800264c <HAL_I2C_MspInit+0xb0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d13b      	bne.n	8002644 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80025d0:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	4618      	mov	r0, r3
 80025dc:	f002 fdd4 	bl	8005188 <HAL_RCCEx_PeriphCLKConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025e6:	f7ff fe37 	bl	8002258 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7ff ffa0 	bl	8002530 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7ff ff9d 	bl	8002530 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025fa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025fc:	2312      	movs	r3, #18
 80025fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002600:	2301      	movs	r3, #1
 8002602:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002604:	2301      	movs	r3, #1
 8002606:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002608:	2304      	movs	r3, #4
 800260a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002610:	4619      	mov	r1, r3
 8002612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002616:	f000 f9f5 	bl	8002a04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800261a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800261e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002620:	2312      	movs	r3, #18
 8002622:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002624:	2301      	movs	r3, #1
 8002626:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002628:	2301      	movs	r3, #1
 800262a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800262c:	2304      	movs	r3, #4
 800262e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002630:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002634:	4619      	mov	r1, r3
 8002636:	4806      	ldr	r0, [pc, #24]	@ (8002650 <HAL_I2C_MspInit+0xb4>)
 8002638:	f000 f9e4 	bl	8002a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800263c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002640:	f7ff ff8e 	bl	8002560 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002644:	bf00      	nop
 8002646:	3758      	adds	r7, #88	@ 0x58
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40005800 	.word	0x40005800
 8002650:	48000400 	.word	0x48000400

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <NMI_Handler+0x4>

0800265c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <MemManage_Handler+0x4>

0800266c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <UsageFault_Handler+0x4>

0800267c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 f88c 	bl	80027c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}

080026ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026b8:	480d      	ldr	r0, [pc, #52]	@ (80026f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026bc:	f7ff fff6 	bl	80026ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	@ (80026f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	@ (80026f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <LoopForever+0xe>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002704 <LoopForever+0x16>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026e6:	f002 fe71 	bl	80053cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ea:	f7ff fc51 	bl	8001f90 <main>

080026ee <LoopForever>:

LoopForever:
    b LoopForever
 80026ee:	e7fe      	b.n	80026ee <LoopForever>
  ldr   r0, =_estack
 80026f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80026fc:	080055d8 	.word	0x080055d8
  ldr r2, =_sbss
 8002700:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002704:	200000d0 	.word	0x200000d0

08002708 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC_IRQHandler>
	...

0800270c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002716:	2003      	movs	r0, #3
 8002718:	f000 f942 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800271c:	f002 fb7a 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8002720:	4603      	mov	r3, r0
 8002722:	4a09      	ldr	r2, [pc, #36]	@ (8002748 <HAL_Init+0x3c>)
 8002724:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002726:	200f      	movs	r0, #15
 8002728:	f000 f810 	bl	800274c <HAL_InitTick>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	71fb      	strb	r3, [r7, #7]
 8002736:	e001      	b.n	800273c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002738:	f7ff ff2a 	bl	8002590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800273c:	79fb      	ldrb	r3, [r7, #7]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002758:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_InitTick+0x6c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d024      	beq.n	80027aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002760:	f002 fb58 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_InitTick+0x6c>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	4619      	mov	r1, r3
 800276c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002770:	fbb3 f3f1 	udiv	r3, r3, r1
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f936 	bl	80029ea <HAL_SYSTICK_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10f      	bne.n	80027a4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d809      	bhi.n	800279e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278a:	2200      	movs	r2, #0
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	f04f 30ff 	mov.w	r0, #4294967295
 8002792:	f000 f910 	bl	80029b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_InitTick+0x70>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e007      	b.n	80027ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
 80027a2:	e004      	b.n	80027ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	e001      	b.n	80027ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_IncTick+0x1c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b05      	ldr	r3, [pc, #20]	@ (80027e0 <HAL_IncTick+0x20>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <HAL_IncTick+0x20>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	200000cc 	.word	0x200000cc

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b02      	ldr	r3, [pc, #8]	@ (80027f4 <HAL_GetTick+0x10>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	200000cc 	.word	0x200000cc

080027f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff fff0 	bl	80027e4 <HAL_GetTick>
 8002804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002810:	d005      	beq.n	800281e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002812:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <HAL_Delay+0x44>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800281e:	bf00      	nop
 8002820:	f7ff ffe0 	bl	80027e4 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	429a      	cmp	r2, r3
 800282e:	d8f7      	bhi.n	8002820 <HAL_Delay+0x28>
  {
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000000c 	.word	0x2000000c

08002840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002850:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800285c:	4013      	ands	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800286c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <__NVIC_SetPriorityGrouping+0x44>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <__NVIC_GetPriorityGrouping+0x18>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0a1b      	lsrs	r3, r3, #8
 8002892:	f003 0307 	and.w	r3, r3, #7
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	@ (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	@ 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff90 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff49 	bl	8002840 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c4:	f7ff ff60 	bl	8002888 <__NVIC_GetPriorityGrouping>
 80029c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	6978      	ldr	r0, [r7, #20]
 80029d0:	f7ff ff92 	bl	80028f8 <NVIC_EncodePriority>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff ff61 	bl	80028a4 <__NVIC_SetPriority>
}
 80029e2:	bf00      	nop
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b082      	sub	sp, #8
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffb2 	bl	800295c <SysTick_Config>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a12:	e140      	b.n	8002c96 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2101      	movs	r1, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8132 	beq.w	8002c90 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d005      	beq.n	8002a44 <HAL_GPIO_Init+0x40>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d130      	bne.n	8002aa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	f003 0201 	and.w	r2, r3, #1
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d017      	beq.n	8002ae2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d123      	bne.n	8002b36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	6939      	ldr	r1, [r7, #16]
 8002b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2203      	movs	r2, #3
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0203 	and.w	r2, r3, #3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808c 	beq.w	8002c90 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b78:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb4 <HAL_GPIO_Init+0x2b0>)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	2207      	movs	r2, #7
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_GPIO_Init+0x1bc>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a44      	ldr	r2, [pc, #272]	@ (8002cb8 <HAL_GPIO_Init+0x2b4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <HAL_GPIO_Init+0x1b8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a43      	ldr	r2, [pc, #268]	@ (8002cbc <HAL_GPIO_Init+0x2b8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_GPIO_Init+0x1b4>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e004      	b.n	8002bc2 <HAL_GPIO_Init+0x1be>
 8002bb8:	2307      	movs	r3, #7
 8002bba:	e002      	b.n	8002bc2 <HAL_GPIO_Init+0x1be>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_GPIO_Init+0x1be>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	f002 0203 	and.w	r2, r2, #3
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	4093      	lsls	r3, r2
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bd2:	4938      	ldr	r1, [pc, #224]	@ (8002cb4 <HAL_GPIO_Init+0x2b0>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be0:	4b37      	ldr	r3, [pc, #220]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c04:	4a2e      	ldr	r2, [pc, #184]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c2e:	4a24      	ldr	r2, [pc, #144]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002c34:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c3a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4013      	ands	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002c5a:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002c62:	4b17      	ldr	r3, [pc, #92]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c68:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002c88:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc0 <HAL_GPIO_Init+0x2bc>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3301      	adds	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f aeb7 	bne.w	8002a14 <HAL_GPIO_Init+0x10>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000
 8002cb8:	48000400 	.word	0x48000400
 8002cbc:	48000800 	.word	0x48000800
 8002cc0:	58000800 	.word	0x58000800

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce0:	e002      	b.n	8002ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e08d      	b.n	8002e20 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d106      	bne.n	8002d1e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fc3f 	bl	800259c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2224      	movs	r2, #36	@ 0x24
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	e006      	b.n	8002d7a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d108      	bne.n	8002d94 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	e007      	b.n	8002da4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002db6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69d9      	ldr	r1, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1a      	ldr	r2, [r3, #32]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	461a      	mov	r2, r3
 8002e34:	460b      	mov	r3, r1
 8002e36:	817b      	strh	r3, [r7, #10]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	f040 80fd 	bne.w	8003044 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_I2C_Master_Transmit+0x30>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e0f6      	b.n	8003046 <HAL_I2C_Master_Transmit+0x21e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e60:	f7ff fcc0 	bl	80027e4 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2319      	movs	r3, #25
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fcdf 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0e1      	b.n	8003046 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2221      	movs	r2, #33	@ 0x21
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	893a      	ldrh	r2, [r7, #8]
 8002ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2bff      	cmp	r3, #255	@ 0xff
 8002eb2:	d906      	bls.n	8002ec2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	22ff      	movs	r2, #255	@ 0xff
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002eba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	e007      	b.n	8002ed2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002ecc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ed0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d024      	beq.n	8002f24 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	4b4e      	ldr	r3, [pc, #312]	@ (8003050 <HAL_I2C_Master_Transmit+0x228>)
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fed9 	bl	8003cd4 <I2C_TransferConfig>
 8002f22:	e066      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	8979      	ldrh	r1, [r7, #10]
 8002f2c:	4b48      	ldr	r3, [pc, #288]	@ (8003050 <HAL_I2C_Master_Transmit+0x228>)
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fece 	bl	8003cd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f38:	e05b      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	6a39      	ldr	r1, [r7, #32]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fcd2 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07b      	b.n	8003046 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	781a      	ldrb	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d034      	beq.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ca>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d130      	bne.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2180      	movs	r1, #128	@ 0x80
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fc4b 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e04d      	b.n	8003046 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2bff      	cmp	r3, #255	@ 0xff
 8002fb2:	d90e      	bls.n	8002fd2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	22ff      	movs	r2, #255	@ 0xff
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 fe82 	bl	8003cd4 <I2C_TransferConfig>
 8002fd0:	e00f      	b.n	8002ff2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	8979      	ldrh	r1, [r7, #10]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fe71 	bl	8003cd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d19e      	bne.n	8002f3a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	6a39      	ldr	r1, [r7, #32]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fcb8 	bl	8003976 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e01a      	b.n	8003046 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2220      	movs	r2, #32
 8003016:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <HAL_I2C_Master_Transmit+0x22c>)
 8003024:	400b      	ands	r3, r1
 8003026:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	80002000 	.word	0x80002000
 8003054:	fe00e800 	.word	0xfe00e800

08003058 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	461a      	mov	r2, r3
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
 8003068:	4613      	mov	r3, r2
 800306a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b20      	cmp	r3, #32
 8003076:	f040 80db 	bne.w	8003230 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_I2C_Master_Receive+0x30>
 8003084:	2302      	movs	r3, #2
 8003086:	e0d4      	b.n	8003232 <HAL_I2C_Master_Receive+0x1da>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003090:	f7ff fba8 	bl	80027e4 <HAL_GetTick>
 8003094:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2319      	movs	r3, #25
 800309c:	2201      	movs	r2, #1
 800309e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fbc7 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0bf      	b.n	8003232 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2222      	movs	r2, #34	@ 0x22
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2210      	movs	r2, #16
 80030be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	893a      	ldrh	r2, [r7, #8]
 80030d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2bff      	cmp	r3, #255	@ 0xff
 80030e2:	d90e      	bls.n	8003102 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	22ff      	movs	r2, #255	@ 0xff
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	8979      	ldrh	r1, [r7, #10]
 80030f2:	4b52      	ldr	r3, [pc, #328]	@ (800323c <HAL_I2C_Master_Receive+0x1e4>)
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fdea 	bl	8003cd4 <I2C_TransferConfig>
 8003100:	e06d      	b.n	80031de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	4b49      	ldr	r3, [pc, #292]	@ (800323c <HAL_I2C_Master_Receive+0x1e4>)
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fdd9 	bl	8003cd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003122:	e05c      	b.n	80031de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	6a39      	ldr	r1, [r7, #32]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fc67 	bl	80039fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e07c      	b.n	8003232 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d034      	beq.n	80031de <HAL_I2C_Master_Receive+0x186>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003178:	2b00      	cmp	r3, #0
 800317a:	d130      	bne.n	80031de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2200      	movs	r2, #0
 8003184:	2180      	movs	r1, #128	@ 0x80
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fb55 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e04d      	b.n	8003232 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	2bff      	cmp	r3, #255	@ 0xff
 800319e:	d90e      	bls.n	80031be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	22ff      	movs	r2, #255	@ 0xff
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fd8c 	bl	8003cd4 <I2C_TransferConfig>
 80031bc:	e00f      	b.n	80031de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	8979      	ldrh	r1, [r7, #10]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fd7b 	bl	8003cd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d19d      	bne.n	8003124 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	6a39      	ldr	r1, [r7, #32]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fbc2 	bl	8003976 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01a      	b.n	8003232 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <HAL_I2C_Master_Receive+0x1e8>)
 8003210:	400b      	ands	r3, r1
 8003212:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	80002400 	.word	0x80002400
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	4608      	mov	r0, r1
 800324e:	4611      	mov	r1, r2
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	460b      	mov	r3, r1
 8003258:	813b      	strh	r3, [r7, #8]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b20      	cmp	r3, #32
 8003268:	f040 80f9 	bne.w	800345e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_I2C_Mem_Write+0x34>
 8003272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ed      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_I2C_Mem_Write+0x4e>
 800328e:	2302      	movs	r3, #2
 8003290:	e0e6      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800329a:	f7ff faa3 	bl	80027e4 <HAL_GetTick>
 800329e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2319      	movs	r3, #25
 80032a6:	2201      	movs	r2, #1
 80032a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fac2 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0d1      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2221      	movs	r2, #33	@ 0x21
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2240      	movs	r2, #64	@ 0x40
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a3a      	ldr	r2, [r7, #32]
 80032d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e4:	88f8      	ldrh	r0, [r7, #6]
 80032e6:	893a      	ldrh	r2, [r7, #8]
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	4603      	mov	r3, r0
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f9d3 	bl	80036a0 <I2C_RequestMemoryWrite>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0a9      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2bff      	cmp	r3, #255	@ 0xff
 8003314:	d90e      	bls.n	8003334 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22ff      	movs	r2, #255	@ 0xff
 800331a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	b2da      	uxtb	r2, r3
 8003322:	8979      	ldrh	r1, [r7, #10]
 8003324:	2300      	movs	r3, #0
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fcd1 	bl	8003cd4 <I2C_TransferConfig>
 8003332:	e00f      	b.n	8003354 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	b2da      	uxtb	r2, r3
 8003344:	8979      	ldrh	r1, [r7, #10]
 8003346:	2300      	movs	r3, #0
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fcc0 	bl	8003cd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fac5 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e07b      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d034      	beq.n	800340c <HAL_I2C_Mem_Write+0x1c8>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d130      	bne.n	800340c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b0:	2200      	movs	r2, #0
 80033b2:	2180      	movs	r1, #128	@ 0x80
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fa3e 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e04d      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2bff      	cmp	r3, #255	@ 0xff
 80033cc:	d90e      	bls.n	80033ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	22ff      	movs	r2, #255	@ 0xff
 80033d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	8979      	ldrh	r1, [r7, #10]
 80033dc:	2300      	movs	r3, #0
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fc75 	bl	8003cd4 <I2C_TransferConfig>
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	8979      	ldrh	r1, [r7, #10]
 80033fe:	2300      	movs	r3, #0
 8003400:	9300      	str	r3, [sp, #0]
 8003402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 fc64 	bl	8003cd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d19e      	bne.n	8003354 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 faab 	bl	8003976 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e01a      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2220      	movs	r2, #32
 8003430:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <HAL_I2C_Mem_Write+0x224>)
 800343e:	400b      	ands	r3, r1
 8003440:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	e000      	b.n	8003460 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800345e:	2302      	movs	r3, #2
  }
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	fe00e800 	.word	0xfe00e800

0800346c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af02      	add	r7, sp, #8
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	817b      	strh	r3, [r7, #10]
 800347e:	460b      	mov	r3, r1
 8003480:	813b      	strh	r3, [r7, #8]
 8003482:	4613      	mov	r3, r2
 8003484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	f040 80fd 	bne.w	800368e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x34>
 800349a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e0f1      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_Mem_Read+0x4e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0ea      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034c2:	f7ff f98f 	bl	80027e4 <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2319      	movs	r3, #25
 80034ce:	2201      	movs	r2, #1
 80034d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f9ae 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d5      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2222      	movs	r2, #34	@ 0x22
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2240      	movs	r2, #64	@ 0x40
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003504:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800350c:	88f8      	ldrh	r0, [r7, #6]
 800350e:	893a      	ldrh	r2, [r7, #8]
 8003510:	8979      	ldrh	r1, [r7, #10]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4603      	mov	r3, r0
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f913 	bl	8003748 <I2C_RequestMemoryRead>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0ad      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2bff      	cmp	r3, #255	@ 0xff
 800353c:	d90e      	bls.n	800355c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	@ 0xff
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003548:	b2da      	uxtb	r2, r3
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	4b52      	ldr	r3, [pc, #328]	@ (8003698 <HAL_I2C_Mem_Read+0x22c>)
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 fbbd 	bl	8003cd4 <I2C_TransferConfig>
 800355a:	e00f      	b.n	800357c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356a:	b2da      	uxtb	r2, r3
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	4b4a      	ldr	r3, [pc, #296]	@ (8003698 <HAL_I2C_Mem_Read+0x22c>)
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fbac 	bl	8003cd4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	2200      	movs	r2, #0
 8003584:	2104      	movs	r1, #4
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f955 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e07c      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d034      	beq.n	800363c <HAL_I2C_Mem_Read+0x1d0>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d130      	bne.n	800363c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	2200      	movs	r2, #0
 80035e2:	2180      	movs	r1, #128	@ 0x80
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f926 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04d      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2bff      	cmp	r3, #255	@ 0xff
 80035fc:	d90e      	bls.n	800361c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22ff      	movs	r2, #255	@ 0xff
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fb5d 	bl	8003cd4 <I2C_TransferConfig>
 800361a:	e00f      	b.n	800363c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	b2da      	uxtb	r2, r3
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fb4c 	bl	8003cd4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d19a      	bne.n	800357c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f993 	bl	8003976 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e01a      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2220      	movs	r2, #32
 8003660:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6859      	ldr	r1, [r3, #4]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_I2C_Mem_Read+0x230>)
 800366e:	400b      	ands	r3, r1
 8003670:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e000      	b.n	8003690 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800368e:	2302      	movs	r3, #2
  }
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	80002400 	.word	0x80002400
 800369c:	fe00e800 	.word	0xfe00e800

080036a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af02      	add	r7, sp, #8
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	4608      	mov	r0, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	461a      	mov	r2, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	817b      	strh	r3, [r7, #10]
 80036b2:	460b      	mov	r3, r1
 80036b4:	813b      	strh	r3, [r7, #8]
 80036b6:	4613      	mov	r3, r2
 80036b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	8979      	ldrh	r1, [r7, #10]
 80036c0:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <I2C_RequestMemoryWrite+0xa4>)
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fb03 	bl	8003cd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f908 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e02c      	b.n	800373c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d105      	bne.n	80036f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80036f2:	e015      	b.n	8003720 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 f8ee 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e012      	b.n	800373c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003716:	893b      	ldrh	r3, [r7, #8]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2200      	movs	r2, #0
 8003728:	2180      	movs	r1, #128	@ 0x80
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f883 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	80002000 	.word	0x80002000

08003748 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	4608      	mov	r0, r1
 8003752:	4611      	mov	r1, r2
 8003754:	461a      	mov	r2, r3
 8003756:	4603      	mov	r3, r0
 8003758:	817b      	strh	r3, [r7, #10]
 800375a:	460b      	mov	r3, r1
 800375c:	813b      	strh	r3, [r7, #8]
 800375e:	4613      	mov	r3, r2
 8003760:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	8979      	ldrh	r1, [r7, #10]
 8003768:	4b20      	ldr	r3, [pc, #128]	@ (80037ec <I2C_RequestMemoryRead+0xa4>)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fab0 	bl	8003cd4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 f8b5 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e02c      	b.n	80037e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800378e:	893b      	ldrh	r3, [r7, #8]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	629a      	str	r2, [r3, #40]	@ 0x28
 8003798:	e015      	b.n	80037c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	b29b      	uxth	r3, r3
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f89b 	bl	80038e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e012      	b.n	80037e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037bc:	893b      	ldrh	r3, [r7, #8]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2140      	movs	r1, #64	@ 0x40
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f830 	bl	8003836 <I2C_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	80002000 	.word	0x80002000

080037f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d103      	bne.n	800380e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	619a      	str	r2, [r3, #24]
  }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4613      	mov	r3, r2
 8003844:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003846:	e03b      	b.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	6839      	ldr	r1, [r7, #0]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f961 	bl	8003b14 <I2C_IsErrorOccurred>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e041      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d02d      	beq.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003864:	f7fe ffbe 	bl	80027e4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d302      	bcc.n	800387a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d122      	bne.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d113      	bne.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e00f      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d0b4      	beq.n	8003848 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038f4:	e033      	b.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f90a 	bl	8003b14 <I2C_IsErrorOccurred>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e031      	b.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d025      	beq.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003912:	f7fe ff67 	bl	80027e4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11a      	bne.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b02      	cmp	r3, #2
 8003934:	d013      	beq.n	800395e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d1c4      	bne.n	80038f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003982:	e02f      	b.n	80039e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f8c3 	bl	8003b14 <I2C_IsErrorOccurred>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e02d      	b.n	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003998:	f7fe ff24 	bl	80027e4 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d302      	bcc.n	80039ae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11a      	bne.n	80039e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d013      	beq.n	80039e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e007      	b.n	80039f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	d1c8      	bne.n	8003984 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a0c:	e071      	b.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f87e 	bl	8003b14 <I2C_IsErrorOccurred>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d13b      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d138      	bne.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d105      	bne.n	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d121      	bne.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2220      	movs	r2, #32
 8003a72:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b24      	ldr	r3, [pc, #144]	@ (8003b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003a80:	400b      	ands	r3, r1
 8003a82:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	75fb      	strb	r3, [r7, #23]
 8003aa0:	e002      	b.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003aa8:	f7fe fe9c 	bl	80027e4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d119      	bne.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d116      	bne.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d00f      	beq.n	8003af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d002      	beq.n	8003b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d083      	beq.n	8003a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	fe00e800 	.word	0xfe00e800

08003b14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	@ 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d068      	beq.n	8003c12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2210      	movs	r2, #16
 8003b46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b48:	e049      	b.n	8003bde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d045      	beq.n	8003bde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fe fe47 	bl	80027e4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <I2C_IsErrorOccurred+0x54>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d13a      	bne.n	8003bde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8a:	d121      	bne.n	8003bd0 <I2C_IsErrorOccurred+0xbc>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b92:	d01d      	beq.n	8003bd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	d01a      	beq.n	8003bd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ba8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003baa:	f7fe fe1b 	bl	80027e4 <HAL_GetTick>
 8003bae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bb0:	e00e      	b.n	8003bd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bb2:	f7fe fe17 	bl	80027e4 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b19      	cmp	r3, #25
 8003bbe:	d907      	bls.n	8003bd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	f043 0320 	orr.w	r3, r3, #32
 8003bc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bce:	e006      	b.n	8003bde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d1e9      	bne.n	8003bb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d003      	beq.n	8003bf4 <I2C_IsErrorOccurred+0xe0>
 8003bec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0aa      	beq.n	8003b4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2220      	movs	r2, #32
 8003c02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	f043 0304 	orr.w	r3, r3, #4
 8003c0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	f043 0308 	orr.w	r3, r3, #8
 8003c4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003c80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01c      	beq.n	8003cc2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff fdb1 	bl	80037f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <I2C_IsErrorOccurred+0x1bc>)
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3728      	adds	r7, #40	@ 0x28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	fe00e800 	.word	0xfe00e800

08003cd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ce6:	897b      	ldrh	r3, [r7, #10]
 8003ce8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cec:	7a7b      	ldrb	r3, [r7, #9]
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	0d5b      	lsrs	r3, r3, #21
 8003d0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d12:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <I2C_TransferConfig+0x5c>)
 8003d14:	430b      	orrs	r3, r1
 8003d16:	43db      	mvns	r3, r3
 8003d18:	ea02 0103 	and.w	r1, r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	03ff63ff 	.word	0x03ff63ff

08003d34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d138      	bne.n	8003dbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e032      	b.n	8003dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	@ 0x24
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d139      	bne.n	8003e52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d101      	bne.n	8003dec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e033      	b.n	8003e54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	@ 0x24
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0201 	bic.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
	...

08003e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b04      	ldr	r3, [pc, #16]	@ (8003e78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a03      	ldr	r2, [pc, #12]	@ (8003e78 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	58000400 	.word	0x58000400

08003e7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <HAL_PWREx_GetVoltageRange+0x14>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr
 8003e90:	58000400 	.word	0x58000400

08003e94 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea4:	d101      	bne.n	8003eaa <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	58000400 	.word	0x58000400

08003eb8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003eca:	6013      	str	r3, [r2, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ee2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f02:	d101      	bne.n	8003f08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	6013      	str	r3, [r2, #0]
}
 8003f26:	bf00      	nop
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f5c:	d101      	bne.n	8003f62 <LL_RCC_HSE_IsReady+0x18>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <LL_RCC_HSE_IsReady+0x1a>
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f7e:	6013      	str	r3, [r2, #0]
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f9a:	6013      	str	r3, [r2, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003fa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb6:	d101      	bne.n	8003fbc <LL_RCC_HSI_IsReady+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <LL_RCC_HSI_IsReady+0x1a>
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d101      	bne.n	8004006 <LL_RCC_LSE_IsReady+0x18>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_RCC_LSE_IsReady+0x1a>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d101      	bne.n	8004068 <LL_RCC_LSI_IsReady+0x18>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <LL_RCC_LSI_IsReady+0x1a>
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6013      	str	r3, [r2, #0]
}
 8004086:	bf00      	nop
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr

0800408e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	6013      	str	r3, [r2, #0]
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d101      	bne.n	80040c0 <LL_RCC_MSI_IsReady+0x16>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <LL_RCC_MSI_IsReady+0x18>
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d101      	bne.n	80040e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80040ea:	b480      	push	{r7}
 80040ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800410c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004132:	4313      	orrs	r3, r2
 8004134:	604b      	str	r3, [r1, #4]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800416a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
}
 8004174:	4618      	mov	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800418e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4313      	orrs	r3, r2
 8004196:	608b      	str	r3, [r1, #8]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041b2:	f023 020f 	bic.w	r2, r3, #15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80041d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004238:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800424a:	b480      	push	{r7}
 800424c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004258:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800425c:	6013      	str	r3, [r2, #0]
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004266:	b480      	push	{r7}
 8004268:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004278:	6013      	str	r3, [r2, #0]
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004294:	d101      	bne.n	800429a <LL_RCC_PLL_IsReady+0x18>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <LL_RCC_PLL_IsReady+0x1a>
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80042a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042d2:	b480      	push	{r7}
 80042d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0303 	and.w	r3, r3, #3
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004302:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004310:	d101      	bne.n	8004316 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004328:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800432c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004334:	d101      	bne.n	800433a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004356:	d101      	bne.n	800435c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr

08004366 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004374:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004378:	d101      	bne.n	800437e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e36f      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800439a:	f7ff fee4 	bl	8004166 <LL_RCC_GetSysClkSource>
 800439e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043a0:	f7ff ffa2 	bl	80042e8 <LL_RCC_PLL_GetMainSource>
 80043a4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80c4 	beq.w	800453c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x3e>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d176      	bne.n	80044ae <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d173      	bne.n	80044ae <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e353      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x68>
 80043e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043ee:	e006      	b.n	80043fe <HAL_RCC_OscConfig+0x76>
 80043f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043fe:	4293      	cmp	r3, r2
 8004400:	d222      	bcs.n	8004448 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fd18 	bl	8004e3c <RCC_SetFlashLatencyFromMSIRange>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e331      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004420:	f043 0308 	orr.w	r3, r3, #8
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fe69 	bl	8004118 <LL_RCC_MSI_SetCalibTrimming>
 8004446:	e021      	b.n	800448c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004452:	f043 0308 	orr.w	r3, r3, #8
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fe50 	bl	8004118 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fcdd 	bl	8004e3c <RCC_SetFlashLatencyFromMSIRange>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e2f6      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800448c:	f000 fcc2 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004490:	4603      	mov	r3, r0
 8004492:	4aa7      	ldr	r2, [pc, #668]	@ (8004730 <HAL_RCC_OscConfig+0x3a8>)
 8004494:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004496:	4ba7      	ldr	r3, [pc, #668]	@ (8004734 <HAL_RCC_OscConfig+0x3ac>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe f956 	bl	800274c <HAL_InitTick>
 80044a0:	4603      	mov	r3, r0
 80044a2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80044a4:	7cfb      	ldrb	r3, [r7, #19]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d047      	beq.n	800453a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	e2e5      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d02c      	beq.n	8004510 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044b6:	f7ff fddc 	bl	8004072 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ba:	f7fe f993 	bl	80027e4 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c2:	f7fe f98f 	bl	80027e4 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e2d2      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80044d4:	f7ff fde9 	bl	80040aa <LL_RCC_MSI_IsReady>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f1      	beq.n	80044c2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044e8:	f043 0308 	orr.w	r3, r3, #8
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fe05 	bl	8004118 <LL_RCC_MSI_SetCalibTrimming>
 800450e:	e015      	b.n	800453c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004510:	f7ff fdbd 	bl	800408e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004514:	f7fe f966 	bl	80027e4 <HAL_GetTick>
 8004518:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800451c:	f7fe f962 	bl	80027e4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e2a5      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800452e:	f7ff fdbc 	bl	80040aa <LL_RCC_MSI_IsReady>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f1      	bne.n	800451c <HAL_RCC_OscConfig+0x194>
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800453a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d058      	beq.n	80045fa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x1d2>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	2b0c      	cmp	r3, #12
 8004552:	d108      	bne.n	8004566 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d105      	bne.n	8004566 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d14b      	bne.n	80045fa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e289      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004584:	d102      	bne.n	800458c <HAL_RCC_OscConfig+0x204>
 8004586:	f7ff fcc4 	bl	8003f12 <LL_RCC_HSE_Enable>
 800458a:	e00d      	b.n	80045a8 <HAL_RCC_OscConfig+0x220>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004594:	d104      	bne.n	80045a0 <HAL_RCC_OscConfig+0x218>
 8004596:	f7ff fc8f 	bl	8003eb8 <LL_RCC_HSE_EnableTcxo>
 800459a:	f7ff fcba 	bl	8003f12 <LL_RCC_HSE_Enable>
 800459e:	e003      	b.n	80045a8 <HAL_RCC_OscConfig+0x220>
 80045a0:	f7ff fcc5 	bl	8003f2e <LL_RCC_HSE_Disable>
 80045a4:	f7ff fc96 	bl	8003ed4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fe f918 	bl	80027e4 <HAL_GetTick>
 80045b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe f914 	bl	80027e4 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e257      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80045ca:	f7ff fcbe 	bl	8003f4a <LL_RCC_HSE_IsReady>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0f1      	beq.n	80045b8 <HAL_RCC_OscConfig+0x230>
 80045d4:	e011      	b.n	80045fa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fe f905 	bl	80027e4 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045de:	f7fe f901 	bl	80027e4 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	@ 0x64
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e244      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80045f0:	f7ff fcab 	bl	8003f4a <LL_RCC_HSE_IsReady>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f1      	bne.n	80045de <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d046      	beq.n	8004694 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d005      	beq.n	8004618 <HAL_RCC_OscConfig+0x290>
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b0c      	cmp	r3, #12
 8004610:	d10e      	bne.n	8004630 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d10b      	bne.n	8004630 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e22a      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fccc 	bl	8003fc6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800462e:	e031      	b.n	8004694 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d019      	beq.n	800466c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004638:	f7ff fc98 	bl	8003f6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fe f8d2 	bl	80027e4 <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004644:	f7fe f8ce 	bl	80027e4 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e211      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004656:	f7ff fca5 	bl	8003fa4 <LL_RCC_HSI_IsReady>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f1      	beq.n	8004644 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fcae 	bl	8003fc6 <LL_RCC_HSI_SetCalibTrimming>
 800466a:	e013      	b.n	8004694 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800466c:	f7ff fc8c 	bl	8003f88 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fe f8b8 	bl	80027e4 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fe f8b4 	bl	80027e4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1f7      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800468a:	f7ff fc8b 	bl	8003fa4 <LL_RCC_HSI_IsReady>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f1      	bne.n	8004678 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d06e      	beq.n	800477e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d056      	beq.n	8004756 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	429a      	cmp	r2, r3
 80046be:	d031      	beq.n	8004724 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d006      	beq.n	80046d8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e1d0      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d013      	beq.n	800470a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80046e2:	f7ff fca5 	bl	8004030 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80046e6:	f7fe f87d 	bl	80027e4 <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fe f879 	bl	80027e4 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b11      	cmp	r3, #17
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e1bc      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004700:	f7ff fca6 	bl	8004050 <LL_RCC_LSI_IsReady>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f1      	bne.n	80046ee <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800470e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004712:	f023 0210 	bic.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004724:	f7ff fc74 	bl	8004010 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004728:	f7fe f85c 	bl	80027e4 <HAL_GetTick>
 800472c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800472e:	e00c      	b.n	800474a <HAL_RCC_OscConfig+0x3c2>
 8004730:	20000004 	.word	0x20000004
 8004734:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004738:	f7fe f854 	bl	80027e4 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b11      	cmp	r3, #17
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e197      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800474a:	f7ff fc81 	bl	8004050 <LL_RCC_LSI_IsReady>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f1      	beq.n	8004738 <HAL_RCC_OscConfig+0x3b0>
 8004754:	e013      	b.n	800477e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004756:	f7ff fc6b 	bl	8004030 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fe f843 	bl	80027e4 <HAL_GetTick>
 800475e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004762:	f7fe f83f 	bl	80027e4 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b11      	cmp	r3, #17
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e182      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004774:	f7ff fc6c 	bl	8004050 <LL_RCC_LSI_IsReady>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f1      	bne.n	8004762 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 80d8 	beq.w	800493c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800478c:	f7ff fb82 	bl	8003e94 <LL_PWR_IsEnabledBkUpAccess>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d113      	bne.n	80047be <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004796:	f7ff fb63 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479a:	f7fe f823 	bl	80027e4 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fe f81f 	bl	80027e4 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e162      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80047b4:	f7ff fb6e 	bl	8003e94 <LL_PWR_IsEnabledBkUpAccess>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f1      	beq.n	80047a2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d07b      	beq.n	80048be <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b85      	cmp	r3, #133	@ 0x85
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d109      	bne.n	80047ea <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047e2:	f043 0304 	orr.w	r3, r3, #4
 80047e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fffb 	bl	80027e4 <HAL_GetTick>
 80047ee:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004804:	e00a      	b.n	800481c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fd ffed 	bl	80027e4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e12e      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800481c:	f7ff fbe7 	bl	8003fee <LL_RCC_LSE_IsReady>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0ef      	beq.n	8004806 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	2b81      	cmp	r3, #129	@ 0x81
 800482c:	d003      	beq.n	8004836 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b85      	cmp	r3, #133	@ 0x85
 8004834:	d121      	bne.n	800487a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004836:	f7fd ffd5 	bl	80027e4 <HAL_GetTick>
 800483a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800483c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004844:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800484c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd ffc7 	bl	80027e4 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e108      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0ec      	beq.n	8004852 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004878:	e060      	b.n	800493c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fd ffb3 	bl	80027e4 <HAL_GetTick>
 800487e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800488c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004894:	e00a      	b.n	80048ac <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fd ffa5 	bl	80027e4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0e6      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ec      	bne.n	8004896 <HAL_RCC_OscConfig+0x50e>
 80048bc:	e03e      	b.n	800493c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fd ff91 	bl	80027e4 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048d8:	e00a      	b.n	80048f0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd ff83 	bl	80027e4 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e0c4      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ec      	bne.n	80048da <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004900:	f7fd ff70 	bl	80027e4 <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fd ff62 	bl	80027e4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e0a3      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004932:	f7ff fb5c 	bl	8003fee <LL_RCC_LSE_IsReady>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ef      	bne.n	800491c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8099 	beq.w	8004a78 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d06c      	beq.n	8004a26 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	2b02      	cmp	r3, #2
 8004952:	d14b      	bne.n	80049ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004954:	f7ff fc87 	bl	8004266 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fd ff44 	bl	80027e4 <HAL_GetTick>
 800495c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd ff40 	bl	80027e4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b0a      	cmp	r3, #10
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e083      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004972:	f7ff fc86 	bl	8004282 <LL_RCC_PLL_IsReady>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f1      	bne.n	8004960 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800497c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	4b40      	ldr	r3, [pc, #256]	@ (8004a84 <HAL_RCC_OscConfig+0x6fc>)
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800498e:	4311      	orrs	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004994:	0212      	lsls	r2, r2, #8
 8004996:	4311      	orrs	r1, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800499c:	4311      	orrs	r1, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80049a8:	430a      	orrs	r2, r1
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049b2:	f7ff fc4a 	bl	800424a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049c4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c6:	f7fd ff0d 	bl	80027e4 <HAL_GetTick>
 80049ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ce:	f7fd ff09 	bl	80027e4 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b0a      	cmp	r3, #10
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e04c      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80049e0:	f7ff fc4f 	bl	8004282 <LL_RCC_PLL_IsReady>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f1      	beq.n	80049ce <HAL_RCC_OscConfig+0x646>
 80049ea:	e045      	b.n	8004a78 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ec:	f7ff fc3b 	bl	8004266 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fd fef8 	bl	80027e4 <HAL_GetTick>
 80049f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd fef4 	bl	80027e4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b0a      	cmp	r3, #10
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e037      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004a0a:	f7ff fc3a 	bl	8004282 <LL_RCC_PLL_IsReady>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f1      	bne.n	80049f8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004a88 <HAL_RCC_OscConfig+0x700>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
 8004a24:	e028      	b.n	8004a78 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e023      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0203 	and.w	r2, r3, #3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d115      	bne.n	8004a74 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d10e      	bne.n	8004a74 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	11c1808c 	.word	0x11c1808c
 8004a88:	eefefffc 	.word	0xeefefffc

08004a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e10f      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b89      	ldr	r3, [pc, #548]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d91b      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b86      	ldr	r3, [pc, #536]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 0207 	bic.w	r2, r3, #7
 8004ab6:	4984      	ldr	r1, [pc, #528]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004abe:	f7fd fe91 	bl	80027e4 <HAL_GetTick>
 8004ac2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ac6:	f7fd fe8d 	bl	80027e4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0f3      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d1ef      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fb40 	bl	800417c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004afc:	f7fd fe72 	bl	80027e4 <HAL_GetTick>
 8004b00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b04:	f7fd fe6e 	bl	80027e4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0d4      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b16:	f7ff fbf2 	bl	80042fe <LL_RCC_IsActiveFlag_HPRE>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0f1      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d016      	beq.n	8004b5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fb36 	bl	80041a2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b36:	f7fd fe55 	bl	80027e4 <HAL_GetTick>
 8004b3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b3e:	f7fd fe51 	bl	80027e4 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e0b7      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b50:	f7ff fbe6 	bl	8004320 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f1      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d016      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fb2f 	bl	80041ce <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b70:	f7fd fe38 	bl	80027e4 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b78:	f7fd fe34 	bl	80027e4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e09a      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b8a:	f7ff fbdb 	bl	8004344 <LL_RCC_IsActiveFlag_PPRE1>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f1      	beq.n	8004b78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d017      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff fb24 	bl	80041f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004bac:	f7fd fe1a 	bl	80027e4 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bb4:	f7fd fe16 	bl	80027e4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e07c      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004bc6:	f7ff fbce 	bl	8004366 <LL_RCC_IsActiveFlag_PPRE2>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f1      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d043      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d106      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004be4:	f7ff f9b1 	bl	8003f4a <LL_RCC_HSE_IsReady>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11e      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e066      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004bfa:	f7ff fb42 	bl	8004282 <LL_RCC_PLL_IsReady>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d113      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e05b      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c10:	f7ff fa4b 	bl	80040aa <LL_RCC_MSI_IsReady>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d108      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e050      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c1e:	f7ff f9c1 	bl	8003fa4 <LL_RCC_HSI_IsReady>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e049      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fa85 	bl	8004140 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c36:	f7fd fdd5 	bl	80027e4 <HAL_GetTick>
 8004c3a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3e:	f7fd fdd1 	bl	80027e4 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e035      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c54:	f7ff fa87 	bl	8004166 <LL_RCC_GetSysClkSource>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1ec      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b18      	ldr	r3, [pc, #96]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d21b      	bcs.n	8004caa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b15      	ldr	r3, [pc, #84]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	4913      	ldr	r1, [pc, #76]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c82:	f7fd fdaf 	bl	80027e4 <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c8a:	f7fd fdab 	bl	80027e4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e011      	b.n	8004cc0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x23c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d1ef      	bne.n	8004c8a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004caa:	f000 f8b3 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4a06      	ldr	r2, [pc, #24]	@ (8004ccc <HAL_RCC_ClockConfig+0x240>)
 8004cb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fd47 	bl	800274c <HAL_InitTick>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	58004000 	.word	0x58004000
 8004ccc:	20000004 	.word	0x20000004
 8004cd0:	20000008 	.word	0x20000008

08004cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce2:	f7ff fa40 	bl	8004166 <LL_RCC_GetSysClkSource>
 8004ce6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ce8:	f7ff fafe 	bl	80042e8 <LL_RCC_PLL_GetMainSource>
 8004cec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <HAL_RCC_GetSysClockFreq+0x2c>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d139      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d136      	bne.n	8004d6e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004d00:	f7ff f9e3 	bl	80040ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d115      	bne.n	8004d36 <HAL_RCC_GetSysClockFreq+0x62>
 8004d0a:	f7ff f9de 	bl	80040ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_GetSysClockFreq+0x4e>
 8004d14:	f7ff f9e9 	bl	80040ea <LL_RCC_MSI_GetRange>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	0a1b      	lsrs	r3, r3, #8
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	e005      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x5a>
 8004d22:	f7ff f9ed 	bl	8004100 <LL_RCC_MSI_GetRangeAfterStandby>
 8004d26:	4603      	mov	r3, r0
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	4a36      	ldr	r2, [pc, #216]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x134>)
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	e014      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x8c>
 8004d36:	f7ff f9c8 	bl	80040ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_GetSysClockFreq+0x7a>
 8004d40:	f7ff f9d3 	bl	80040ea <LL_RCC_MSI_GetRange>
 8004d44:	4603      	mov	r3, r0
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	e005      	b.n	8004d5a <HAL_RCC_GetSysClockFreq+0x86>
 8004d4e:	f7ff f9d7 	bl	8004100 <LL_RCC_MSI_GetRangeAfterStandby>
 8004d52:	4603      	mov	r3, r0
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004e08 <HAL_RCC_GetSysClockFreq+0x134>)
 8004d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d60:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d115      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d6c:	e012      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d102      	bne.n	8004d7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d74:	4b25      	ldr	r3, [pc, #148]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x138>)
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	e00c      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d109      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d80:	f7ff f8b6 	bl	8003ef0 <LL_RCC_HSE_IsEnabledDiv2>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d8a:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x138>)
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	e001      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d90:	4b1f      	ldr	r3, [pc, #124]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d92:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d94:	f7ff f9e7 	bl	8004166 <LL_RCC_GetSysClkSource>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d12f      	bne.n	8004dfe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d9e:	f7ff faa3 	bl	80042e8 <LL_RCC_PLL_GetMainSource>
 8004da2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d003      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0xde>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d003      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0xe4>
 8004db0:	e00d      	b.n	8004dce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004db2:	4b16      	ldr	r3, [pc, #88]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x138>)
 8004db4:	60fb      	str	r3, [r7, #12]
        break;
 8004db6:	e00d      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004db8:	f7ff f89a 	bl	8003ef0 <LL_RCC_HSE_IsEnabledDiv2>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d102      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004dc2:	4b12      	ldr	r3, [pc, #72]	@ (8004e0c <HAL_RCC_GetSysClockFreq+0x138>)
 8004dc4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004dc8:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004dca:	60fb      	str	r3, [r7, #12]
        break;
 8004dcc:	e002      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	60fb      	str	r3, [r7, #12]
        break;
 8004dd2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004dd4:	f7ff fa66 	bl	80042a4 <LL_RCC_PLL_GetN>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	fb03 f402 	mul.w	r4, r3, r2
 8004de0:	f7ff fa77 	bl	80042d2 <LL_RCC_PLL_GetDivider>
 8004de4:	4603      	mov	r3, r0
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	3301      	adds	r3, #1
 8004dea:	fbb4 f4f3 	udiv	r4, r4, r3
 8004dee:	f7ff fa65 	bl	80042bc <LL_RCC_PLL_GetR>
 8004df2:	4603      	mov	r3, r0
 8004df4:	0f5b      	lsrs	r3, r3, #29
 8004df6:	3301      	adds	r3, #1
 8004df8:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dfc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004dfe:	697b      	ldr	r3, [r7, #20]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd90      	pop	{r4, r7, pc}
 8004e08:	08005588 	.word	0x08005588
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	01e84800 	.word	0x01e84800

08004e14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e14:	b598      	push	{r3, r4, r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004e18:	f7ff ff5c 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	f7ff f9fc 	bl	800421a <LL_RCC_GetAHBPrescaler>
 8004e22:	4603      	mov	r3, r0
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	4a03      	ldr	r2, [pc, #12]	@ (8004e38 <HAL_RCC_GetHCLKFreq+0x24>)
 8004e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd98      	pop	{r3, r4, r7, pc}
 8004e38:	08005548 	.word	0x08005548

08004e3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	4a10      	ldr	r2, [pc, #64]	@ (8004e90 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e52:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8004e54:	f7ff f9ec 	bl	8004230 <LL_RCC_GetAHB3Prescaler>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	091b      	lsrs	r3, r3, #4
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	4a0c      	ldr	r2, [pc, #48]	@ (8004e94 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8004e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8004e72:	fba2 2303 	umull	r2, r3, r2, r3
 8004e76:	0c9c      	lsrs	r4, r3, #18
 8004e78:	f7ff f800 	bl	8003e7c <HAL_PWREx_GetVoltageRange>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4620      	mov	r0, r4
 8004e82:	f000 f80b 	bl	8004e9c <RCC_SetFlashLatency>
 8004e86:	4603      	mov	r3, r0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd90      	pop	{r4, r7, pc}
 8004e90:	08005588 	.word	0x08005588
 8004e94:	08005548 	.word	0x08005548
 8004e98:	431bde83 	.word	0x431bde83

08004e9c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08e      	sub	sp, #56	@ 0x38
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8004ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8004f90 <RCC_SetFlashLatency+0xf4>)
 8004ea8:	f107 0320 	add.w	r3, r7, #32
 8004eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004eb0:	6018      	str	r0, [r3, #0]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004eb6:	4a37      	ldr	r2, [pc, #220]	@ (8004f94 <RCC_SetFlashLatency+0xf8>)
 8004eb8:	f107 0318 	add.w	r3, r7, #24
 8004ebc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ec0:	6018      	str	r0, [r3, #0]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004ec6:	4a34      	ldr	r2, [pc, #208]	@ (8004f98 <RCC_SetFlashLatency+0xfc>)
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ece:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004edc:	d11b      	bne.n	8004f16 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ee2:	e014      	b.n	8004f0e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	3338      	adds	r3, #56	@ 0x38
 8004eea:	443b      	add	r3, r7
 8004eec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d807      	bhi.n	8004f08 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	3338      	adds	r3, #56	@ 0x38
 8004efe:	443b      	add	r3, r7
 8004f00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f06:	e021      	b.n	8004f4c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d9e7      	bls.n	8004ee4 <RCC_SetFlashLatency+0x48>
 8004f14:	e01a      	b.n	8004f4c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f16:	2300      	movs	r3, #0
 8004f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f1a:	e014      	b.n	8004f46 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	3338      	adds	r3, #56	@ 0x38
 8004f22:	443b      	add	r3, r7
 8004f24:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d807      	bhi.n	8004f40 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	3338      	adds	r3, #56	@ 0x38
 8004f36:	443b      	add	r3, r7
 8004f38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f3e:	e005      	b.n	8004f4c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	3301      	adds	r3, #1
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d9e7      	bls.n	8004f1c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f4c:	4b13      	ldr	r3, [pc, #76]	@ (8004f9c <RCC_SetFlashLatency+0x100>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f023 0207 	bic.w	r2, r3, #7
 8004f54:	4911      	ldr	r1, [pc, #68]	@ (8004f9c <RCC_SetFlashLatency+0x100>)
 8004f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f5c:	f7fd fc42 	bl	80027e4 <HAL_GetTick>
 8004f60:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f62:	e008      	b.n	8004f76 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f64:	f7fd fc3e 	bl	80027e4 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e007      	b.n	8004f86 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <RCC_SetFlashLatency+0x100>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1ef      	bne.n	8004f64 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3738      	adds	r7, #56	@ 0x38
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	0800542c 	.word	0x0800542c
 8004f94:	08005434 	.word	0x08005434
 8004f98:	0800543c 	.word	0x0800543c
 8004f9c:	58004000 	.word	0x58004000

08004fa0 <LL_RCC_LSE_IsReady>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d101      	bne.n	8004fb8 <LL_RCC_LSE_IsReady+0x18>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <LL_RCC_LSE_IsReady+0x1a>
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_SetUSARTClockSource>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	401a      	ands	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bc80      	pop	{r7}
 8004ff0:	4770      	bx	lr

08004ff2 <LL_RCC_SetI2SClockSource>:
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005002:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005006:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <LL_RCC_SetLPUARTClockSource>:
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr

08005046 <LL_RCC_SetI2CClockSource>:
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800504e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005052:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800505e:	43db      	mvns	r3, r3
 8005060:	401a      	ands	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800506a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr

0800507e <LL_RCC_SetLPTIMClockSource>:
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800508a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	0c1b      	lsrs	r3, r3, #16
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	43db      	mvns	r3, r3
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	041b      	lsls	r3, r3, #16
 800509c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <LL_RCC_SetRNGClockSource>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80050c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <LL_RCC_SetADCClockSource>:
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80050e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <LL_RCC_SetRTCClockSource>:
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005118:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <LL_RCC_GetRTCClockSource>:
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800513e:	4618      	mov	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <LL_RCC_ForceBackupDomainReset>:
{
 8005146:	b480      	push	{r7}
 8005148:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800514a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800515a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800515e:	bf00      	nop
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005172:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
	...

08005188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005194:	2300      	movs	r3, #0
 8005196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005198:	2300      	movs	r3, #0
 800519a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d058      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80051a8:	f7fe fe5a 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ac:	f7fd fb1a 	bl	80027e4 <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80051b2:	e009      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b4:	f7fd fb16 	bl	80027e4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	74fb      	strb	r3, [r7, #19]
        break;
 80051c6:	e006      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80051c8:	4b7b      	ldr	r3, [pc, #492]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051d4:	d1ee      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d13c      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80051dc:	f7ff ffa7 	bl	800512e <LL_RCC_GetRTCClockSource>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d00f      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051f8:	f7ff ffa5 	bl	8005146 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051fc:	f7ff ffb3 	bl	8005166 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d014      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd fae6 	bl	80027e4 <HAL_GetTick>
 8005218:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800521a:	e00b      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521c:	f7fd fae2 	bl	80027e4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522a:	4293      	cmp	r3, r2
 800522c:	d902      	bls.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	74fb      	strb	r3, [r7, #19]
            break;
 8005232:	e004      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005234:	f7ff feb4 	bl	8004fa0 <LL_RCC_LSE_IsReady>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d1ee      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff5b 	bl	8005104 <LL_RCC_SetRTCClockSource>
 800524e:	e004      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	74bb      	strb	r3, [r7, #18]
 8005254:	e001      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fea9 	bl	8004fc2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fe9e 	bl	8004fc2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fec0 	bl	800501c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fee6 	bl	800507e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff fedb 	bl	800507e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d004      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fed0 	bl	800507e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d004      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fea9 	bl	8005046 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fe9e 	bl	8005046 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fe93 	bl	8005046 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d011      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fe5e 	bl	8004ff2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800533e:	d107      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800534a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800534e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fea5 	bl	80050b0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536a:	2b00      	cmp	r3, #0
 800536c:	d107      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800536e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005378:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800537c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d011      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fea3 	bl	80050da <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800539c:	d107      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800539e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80053ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3718      	adds	r7, #24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	58000400 	.word	0x58000400

080053bc <memset>:
 80053bc:	4402      	add	r2, r0
 80053be:	4603      	mov	r3, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <__libc_init_array>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005404 <__libc_init_array+0x38>)
 80053d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005408 <__libc_init_array+0x3c>)
 80053d2:	1b64      	subs	r4, r4, r5
 80053d4:	10a4      	asrs	r4, r4, #2
 80053d6:	2600      	movs	r6, #0
 80053d8:	42a6      	cmp	r6, r4
 80053da:	d109      	bne.n	80053f0 <__libc_init_array+0x24>
 80053dc:	4d0b      	ldr	r5, [pc, #44]	@ (800540c <__libc_init_array+0x40>)
 80053de:	4c0c      	ldr	r4, [pc, #48]	@ (8005410 <__libc_init_array+0x44>)
 80053e0:	f000 f818 	bl	8005414 <_init>
 80053e4:	1b64      	subs	r4, r4, r5
 80053e6:	10a4      	asrs	r4, r4, #2
 80053e8:	2600      	movs	r6, #0
 80053ea:	42a6      	cmp	r6, r4
 80053ec:	d105      	bne.n	80053fa <__libc_init_array+0x2e>
 80053ee:	bd70      	pop	{r4, r5, r6, pc}
 80053f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f4:	4798      	blx	r3
 80053f6:	3601      	adds	r6, #1
 80053f8:	e7ee      	b.n	80053d8 <__libc_init_array+0xc>
 80053fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fe:	4798      	blx	r3
 8005400:	3601      	adds	r6, #1
 8005402:	e7f2      	b.n	80053ea <__libc_init_array+0x1e>
 8005404:	080055d0 	.word	0x080055d0
 8005408:	080055d0 	.word	0x080055d0
 800540c:	080055d0 	.word	0x080055d0
 8005410:	080055d4 	.word	0x080055d4

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
