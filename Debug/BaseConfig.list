
BaseConfig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f4  08000138  08000138  00001138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800362c  0800362c  0000462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036c8  080036c8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080036c8  080036c8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080036c8  080036c8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036c8  080036c8  000046c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036cc  080036cc  000046cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036d0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080036dc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080036dc  0000508c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad96  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  0000fdcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00011d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae0  00000000  00000000  00012be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019240  00000000  00000000  000136c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db29  00000000  00000000  0002c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac84  00000000  00000000  0003a431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d50b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c28  00000000  00000000  000d50f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d8d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003614 	.word	0x08003614

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003614 	.word	0x08003614

08000178 <__aeabi_drsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800017c:	e002      	b.n	8000184 <__adddf3>
 800017e:	bf00      	nop

08000180 <__aeabi_dsub>:
 8000180:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000184 <__adddf3>:
 8000184:	b530      	push	{r4, r5, lr}
 8000186:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018e:	ea94 0f05 	teq	r4, r5
 8000192:	bf08      	it	eq
 8000194:	ea90 0f02 	teqeq	r0, r2
 8000198:	bf1f      	itttt	ne
 800019a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001aa:	f000 80e2 	beq.w	8000372 <__adddf3+0x1ee>
 80001ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b6:	bfb8      	it	lt
 80001b8:	426d      	neglt	r5, r5
 80001ba:	dd0c      	ble.n	80001d6 <__adddf3+0x52>
 80001bc:	442c      	add	r4, r5
 80001be:	ea80 0202 	eor.w	r2, r0, r2
 80001c2:	ea81 0303 	eor.w	r3, r1, r3
 80001c6:	ea82 0000 	eor.w	r0, r2, r0
 80001ca:	ea83 0101 	eor.w	r1, r3, r1
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	2d36      	cmp	r5, #54	@ 0x36
 80001d8:	bf88      	it	hi
 80001da:	bd30      	pophi	{r4, r5, pc}
 80001dc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x70>
 80001ee:	4240      	negs	r0, r0
 80001f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x84>
 8000202:	4252      	negs	r2, r2
 8000204:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000208:	ea94 0f05 	teq	r4, r5
 800020c:	f000 80a7 	beq.w	800035e <__adddf3+0x1da>
 8000210:	f1a4 0401 	sub.w	r4, r4, #1
 8000214:	f1d5 0e20 	rsbs	lr, r5, #32
 8000218:	db0d      	blt.n	8000236 <__adddf3+0xb2>
 800021a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021e:	fa22 f205 	lsr.w	r2, r2, r5
 8000222:	1880      	adds	r0, r0, r2
 8000224:	f141 0100 	adc.w	r1, r1, #0
 8000228:	fa03 f20e 	lsl.w	r2, r3, lr
 800022c:	1880      	adds	r0, r0, r2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	4159      	adcs	r1, r3
 8000234:	e00e      	b.n	8000254 <__adddf3+0xd0>
 8000236:	f1a5 0520 	sub.w	r5, r5, #32
 800023a:	f10e 0e20 	add.w	lr, lr, #32
 800023e:	2a01      	cmp	r2, #1
 8000240:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000244:	bf28      	it	cs
 8000246:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	18c0      	adds	r0, r0, r3
 8000250:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000254:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000258:	d507      	bpl.n	800026a <__adddf3+0xe6>
 800025a:	f04f 0e00 	mov.w	lr, #0
 800025e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000262:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000266:	eb6e 0101 	sbc.w	r1, lr, r1
 800026a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026e:	d31b      	bcc.n	80002a8 <__adddf3+0x124>
 8000270:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000274:	d30c      	bcc.n	8000290 <__adddf3+0x10c>
 8000276:	0849      	lsrs	r1, r1, #1
 8000278:	ea5f 0030 	movs.w	r0, r0, rrx
 800027c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000280:	f104 0401 	add.w	r4, r4, #1
 8000284:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000288:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800028c:	f080 809a 	bcs.w	80003c4 <__adddf3+0x240>
 8000290:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	ea41 0105 	orr.w	r1, r1, r5
 80002a6:	bd30      	pop	{r4, r5, pc}
 80002a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002ac:	4140      	adcs	r0, r0
 80002ae:	eb41 0101 	adc.w	r1, r1, r1
 80002b2:	3c01      	subs	r4, #1
 80002b4:	bf28      	it	cs
 80002b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ba:	d2e9      	bcs.n	8000290 <__adddf3+0x10c>
 80002bc:	f091 0f00 	teq	r1, #0
 80002c0:	bf04      	itt	eq
 80002c2:	4601      	moveq	r1, r0
 80002c4:	2000      	moveq	r0, #0
 80002c6:	fab1 f381 	clz	r3, r1
 80002ca:	bf08      	it	eq
 80002cc:	3320      	addeq	r3, #32
 80002ce:	f1a3 030b 	sub.w	r3, r3, #11
 80002d2:	f1b3 0220 	subs.w	r2, r3, #32
 80002d6:	da0c      	bge.n	80002f2 <__adddf3+0x16e>
 80002d8:	320c      	adds	r2, #12
 80002da:	dd08      	ble.n	80002ee <__adddf3+0x16a>
 80002dc:	f102 0c14 	add.w	ip, r2, #20
 80002e0:	f1c2 020c 	rsb	r2, r2, #12
 80002e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e8:	fa21 f102 	lsr.w	r1, r1, r2
 80002ec:	e00c      	b.n	8000308 <__adddf3+0x184>
 80002ee:	f102 0214 	add.w	r2, r2, #20
 80002f2:	bfd8      	it	le
 80002f4:	f1c2 0c20 	rsble	ip, r2, #32
 80002f8:	fa01 f102 	lsl.w	r1, r1, r2
 80002fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000300:	bfdc      	itt	le
 8000302:	ea41 010c 	orrle.w	r1, r1, ip
 8000306:	4090      	lslle	r0, r2
 8000308:	1ae4      	subs	r4, r4, r3
 800030a:	bfa2      	ittt	ge
 800030c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000310:	4329      	orrge	r1, r5
 8000312:	bd30      	popge	{r4, r5, pc}
 8000314:	ea6f 0404 	mvn.w	r4, r4
 8000318:	3c1f      	subs	r4, #31
 800031a:	da1c      	bge.n	8000356 <__adddf3+0x1d2>
 800031c:	340c      	adds	r4, #12
 800031e:	dc0e      	bgt.n	800033e <__adddf3+0x1ba>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0220 	rsb	r2, r4, #32
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f302 	lsl.w	r3, r1, r2
 8000330:	ea40 0003 	orr.w	r0, r0, r3
 8000334:	fa21 f304 	lsr.w	r3, r1, r4
 8000338:	ea45 0103 	orr.w	r1, r5, r3
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	f1c4 040c 	rsb	r4, r4, #12
 8000342:	f1c4 0220 	rsb	r2, r4, #32
 8000346:	fa20 f002 	lsr.w	r0, r0, r2
 800034a:	fa01 f304 	lsl.w	r3, r1, r4
 800034e:	ea40 0003 	orr.w	r0, r0, r3
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	fa21 f004 	lsr.w	r0, r1, r4
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f094 0f00 	teq	r4, #0
 8000362:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000366:	bf06      	itte	eq
 8000368:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800036c:	3401      	addeq	r4, #1
 800036e:	3d01      	subne	r5, #1
 8000370:	e74e      	b.n	8000210 <__adddf3+0x8c>
 8000372:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000376:	bf18      	it	ne
 8000378:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800037c:	d029      	beq.n	80003d2 <__adddf3+0x24e>
 800037e:	ea94 0f05 	teq	r4, r5
 8000382:	bf08      	it	eq
 8000384:	ea90 0f02 	teqeq	r0, r2
 8000388:	d005      	beq.n	8000396 <__adddf3+0x212>
 800038a:	ea54 0c00 	orrs.w	ip, r4, r0
 800038e:	bf04      	itt	eq
 8000390:	4619      	moveq	r1, r3
 8000392:	4610      	moveq	r0, r2
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	ea91 0f03 	teq	r1, r3
 800039a:	bf1e      	ittt	ne
 800039c:	2100      	movne	r1, #0
 800039e:	2000      	movne	r0, #0
 80003a0:	bd30      	popne	{r4, r5, pc}
 80003a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a6:	d105      	bne.n	80003b4 <__adddf3+0x230>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	4149      	adcs	r1, r1
 80003ac:	bf28      	it	cs
 80003ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b8:	bf3c      	itt	cc
 80003ba:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003be:	bd30      	popcc	{r4, r5, pc}
 80003c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003cc:	f04f 0000 	mov.w	r0, #0
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf1a      	itte	ne
 80003d8:	4619      	movne	r1, r3
 80003da:	4610      	movne	r0, r2
 80003dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e0:	bf1c      	itt	ne
 80003e2:	460b      	movne	r3, r1
 80003e4:	4602      	movne	r2, r0
 80003e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ea:	bf06      	itte	eq
 80003ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f0:	ea91 0f03 	teqeq	r1, r3
 80003f4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	bf00      	nop

080003fc <__aeabi_ui2d>:
 80003fc:	f090 0f00 	teq	r0, #0
 8000400:	bf04      	itt	eq
 8000402:	2100      	moveq	r1, #0
 8000404:	4770      	bxeq	lr
 8000406:	b530      	push	{r4, r5, lr}
 8000408:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800040c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000410:	f04f 0500 	mov.w	r5, #0
 8000414:	f04f 0100 	mov.w	r1, #0
 8000418:	e750      	b.n	80002bc <__adddf3+0x138>
 800041a:	bf00      	nop

0800041c <__aeabi_i2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000430:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000434:	bf48      	it	mi
 8000436:	4240      	negmi	r0, r0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e73e      	b.n	80002bc <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_f2d>:
 8000440:	0042      	lsls	r2, r0, #1
 8000442:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000446:	ea4f 0131 	mov.w	r1, r1, rrx
 800044a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044e:	bf1f      	itttt	ne
 8000450:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000454:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000458:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800045c:	4770      	bxne	lr
 800045e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000462:	bf08      	it	eq
 8000464:	4770      	bxeq	lr
 8000466:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800046a:	bf04      	itt	eq
 800046c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	e71c      	b.n	80002bc <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_ul2d>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	b530      	push	{r4, r5, lr}
 800048e:	f04f 0500 	mov.w	r5, #0
 8000492:	e00a      	b.n	80004aa <__aeabi_l2d+0x16>

08000494 <__aeabi_l2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004a2:	d502      	bpl.n	80004aa <__aeabi_l2d+0x16>
 80004a4:	4240      	negs	r0, r0
 80004a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004aa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ae:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b6:	f43f aed8 	beq.w	800026a <__adddf3+0xe6>
 80004ba:	f04f 0203 	mov.w	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d2:	f1c2 0320 	rsb	r3, r2, #32
 80004d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004da:	fa20 f002 	lsr.w	r0, r0, r2
 80004de:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e2:	ea40 000e 	orr.w	r0, r0, lr
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	4414      	add	r4, r2
 80004ec:	e6bd      	b.n	800026a <__adddf3+0xe6>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dmul>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fe:	bf1d      	ittte	ne
 8000500:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000504:	ea94 0f0c 	teqne	r4, ip
 8000508:	ea95 0f0c 	teqne	r5, ip
 800050c:	f000 f8de 	bleq	80006cc <__aeabi_dmul+0x1dc>
 8000510:	442c      	add	r4, r5
 8000512:	ea81 0603 	eor.w	r6, r1, r3
 8000516:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000522:	bf18      	it	ne
 8000524:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000528:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800052c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000530:	d038      	beq.n	80005a4 <__aeabi_dmul+0xb4>
 8000532:	fba0 ce02 	umull	ip, lr, r0, r2
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000542:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000546:	f04f 0600 	mov.w	r6, #0
 800054a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054e:	f09c 0f00 	teq	ip, #0
 8000552:	bf18      	it	ne
 8000554:	f04e 0e01 	orrne.w	lr, lr, #1
 8000558:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800055c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000560:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000564:	d204      	bcs.n	8000570 <__aeabi_dmul+0x80>
 8000566:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056a:	416d      	adcs	r5, r5
 800056c:	eb46 0606 	adc.w	r6, r6, r6
 8000570:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000574:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000578:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800057c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000580:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000584:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000588:	bf88      	it	hi
 800058a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058e:	d81e      	bhi.n	80005ce <__aeabi_dmul+0xde>
 8000590:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a8:	ea46 0101 	orr.w	r1, r6, r1
 80005ac:	ea40 0002 	orr.w	r0, r0, r2
 80005b0:	ea81 0103 	eor.w	r1, r1, r3
 80005b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b8:	bfc2      	ittt	gt
 80005ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	popgt	{r4, r5, r6, pc}
 80005c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c8:	f04f 0e00 	mov.w	lr, #0
 80005cc:	3c01      	subs	r4, #1
 80005ce:	f300 80ab 	bgt.w	8000728 <__aeabi_dmul+0x238>
 80005d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d6:	bfde      	ittt	le
 80005d8:	2000      	movle	r0, #0
 80005da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd70      	pople	{r4, r5, r6, pc}
 80005e0:	f1c4 0400 	rsb	r4, r4, #0
 80005e4:	3c20      	subs	r4, #32
 80005e6:	da35      	bge.n	8000654 <__aeabi_dmul+0x164>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc1b      	bgt.n	8000624 <__aeabi_dmul+0x134>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0520 	rsb	r5, r4, #32
 80005f4:	fa00 f305 	lsl.w	r3, r0, r5
 80005f8:	fa20 f004 	lsr.w	r0, r0, r4
 80005fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	fa21 f604 	lsr.w	r6, r1, r4
 8000614:	eb42 0106 	adc.w	r1, r2, r6
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 040c 	rsb	r4, r4, #12
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f304 	lsl.w	r3, r0, r4
 8000630:	fa20 f005 	lsr.w	r0, r0, r5
 8000634:	fa01 f204 	lsl.w	r2, r1, r4
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000644:	f141 0100 	adc.w	r1, r1, #0
 8000648:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800064c:	bf08      	it	eq
 800064e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f205 	lsl.w	r2, r0, r5
 800065c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000660:	fa20 f304 	lsr.w	r3, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea43 0302 	orr.w	r3, r3, r2
 800066c:	fa21 f004 	lsr.w	r0, r1, r4
 8000670:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	fa21 f204 	lsr.w	r2, r1, r4
 8000678:	ea20 0002 	bic.w	r0, r0, r2
 800067c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f094 0f00 	teq	r4, #0
 8000690:	d10f      	bne.n	80006b2 <__aeabi_dmul+0x1c2>
 8000692:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000696:	0040      	lsls	r0, r0, #1
 8000698:	eb41 0101 	adc.w	r1, r1, r1
 800069c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3c01      	subeq	r4, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1a6>
 80006a6:	ea41 0106 	orr.w	r1, r1, r6
 80006aa:	f095 0f00 	teq	r5, #0
 80006ae:	bf18      	it	ne
 80006b0:	4770      	bxne	lr
 80006b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	eb43 0303 	adc.w	r3, r3, r3
 80006bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3d01      	subeq	r5, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1c6>
 80006c6:	ea43 0306 	orr.w	r3, r3, r6
 80006ca:	4770      	bx	lr
 80006cc:	ea94 0f0c 	teq	r4, ip
 80006d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d4:	bf18      	it	ne
 80006d6:	ea95 0f0c 	teqne	r5, ip
 80006da:	d00c      	beq.n	80006f6 <__aeabi_dmul+0x206>
 80006dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e0:	bf18      	it	ne
 80006e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e6:	d1d1      	bne.n	800068c <__aeabi_dmul+0x19c>
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	f04f 0000 	mov.w	r0, #0
 80006f4:	bd70      	pop	{r4, r5, r6, pc}
 80006f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fa:	bf06      	itte	eq
 80006fc:	4610      	moveq	r0, r2
 80006fe:	4619      	moveq	r1, r3
 8000700:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000704:	d019      	beq.n	800073a <__aeabi_dmul+0x24a>
 8000706:	ea94 0f0c 	teq	r4, ip
 800070a:	d102      	bne.n	8000712 <__aeabi_dmul+0x222>
 800070c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000710:	d113      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000712:	ea95 0f0c 	teq	r5, ip
 8000716:	d105      	bne.n	8000724 <__aeabi_dmul+0x234>
 8000718:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800071c:	bf1c      	itt	ne
 800071e:	4610      	movne	r0, r2
 8000720:	4619      	movne	r1, r3
 8000722:	d10a      	bne.n	800073a <__aeabi_dmul+0x24a>
 8000724:	ea81 0103 	eor.w	r1, r1, r3
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000730:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000734:	f04f 0000 	mov.w	r0, #0
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000742:	bd70      	pop	{r4, r5, r6, pc}

08000744 <__aeabi_ddiv>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800074a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000752:	bf1d      	ittte	ne
 8000754:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000758:	ea94 0f0c 	teqne	r4, ip
 800075c:	ea95 0f0c 	teqne	r5, ip
 8000760:	f000 f8a7 	bleq	80008b2 <__aeabi_ddiv+0x16e>
 8000764:	eba4 0405 	sub.w	r4, r4, r5
 8000768:	ea81 0e03 	eor.w	lr, r1, r3
 800076c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000770:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000774:	f000 8088 	beq.w	8000888 <__aeabi_ddiv+0x144>
 8000778:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800077c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000780:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000784:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000788:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800078c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000790:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000794:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000798:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800079c:	429d      	cmp	r5, r3
 800079e:	bf08      	it	eq
 80007a0:	4296      	cmpeq	r6, r2
 80007a2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007aa:	d202      	bcs.n	80007b2 <__aeabi_ddiv+0x6e>
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	1ab6      	subs	r6, r6, r2
 80007b4:	eb65 0503 	sbc.w	r5, r5, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007c2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000820:	ea55 0e06 	orrs.w	lr, r5, r6
 8000824:	d018      	beq.n	8000858 <__aeabi_ddiv+0x114>
 8000826:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000832:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000836:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000842:	d1c0      	bne.n	80007c6 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	d10b      	bne.n	8000862 <__aeabi_ddiv+0x11e>
 800084a:	ea41 0100 	orr.w	r1, r1, r0
 800084e:	f04f 0000 	mov.w	r0, #0
 8000852:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000856:	e7b6      	b.n	80007c6 <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800085c:	bf04      	itt	eq
 800085e:	4301      	orreq	r1, r0
 8000860:	2000      	moveq	r0, #0
 8000862:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000866:	bf88      	it	hi
 8000868:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800086c:	f63f aeaf 	bhi.w	80005ce <__aeabi_dmul+0xde>
 8000870:	ebb5 0c03 	subs.w	ip, r5, r3
 8000874:	bf04      	itt	eq
 8000876:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087e:	f150 0000 	adcs.w	r0, r0, #0
 8000882:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800088c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000890:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000894:	bfc2      	ittt	gt
 8000896:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089e:	bd70      	popgt	{r4, r5, r6, pc}
 80008a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a4:	f04f 0e00 	mov.w	lr, #0
 80008a8:	3c01      	subs	r4, #1
 80008aa:	e690      	b.n	80005ce <__aeabi_dmul+0xde>
 80008ac:	ea45 0e06 	orr.w	lr, r5, r6
 80008b0:	e68d      	b.n	80005ce <__aeabi_dmul+0xde>
 80008b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b6:	ea94 0f0c 	teq	r4, ip
 80008ba:	bf08      	it	eq
 80008bc:	ea95 0f0c 	teqeq	r5, ip
 80008c0:	f43f af3b 	beq.w	800073a <__aeabi_dmul+0x24a>
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	d10a      	bne.n	80008e0 <__aeabi_ddiv+0x19c>
 80008ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ce:	f47f af34 	bne.w	800073a <__aeabi_dmul+0x24a>
 80008d2:	ea95 0f0c 	teq	r5, ip
 80008d6:	f47f af25 	bne.w	8000724 <__aeabi_dmul+0x234>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e72c      	b.n	800073a <__aeabi_dmul+0x24a>
 80008e0:	ea95 0f0c 	teq	r5, ip
 80008e4:	d106      	bne.n	80008f4 <__aeabi_ddiv+0x1b0>
 80008e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ea:	f43f aefd 	beq.w	80006e8 <__aeabi_dmul+0x1f8>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e722      	b.n	800073a <__aeabi_dmul+0x24a>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	f47f aec5 	bne.w	800068c <__aeabi_dmul+0x19c>
 8000902:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000906:	f47f af0d 	bne.w	8000724 <__aeabi_dmul+0x234>
 800090a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090e:	f47f aeeb 	bne.w	80006e8 <__aeabi_dmul+0x1f8>
 8000912:	e712      	b.n	800073a <__aeabi_dmul+0x24a>

08000914 <__aeabi_d2f>:
 8000914:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000918:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800091c:	bf24      	itt	cs
 800091e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000922:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000926:	d90d      	bls.n	8000944 <__aeabi_d2f+0x30>
 8000928:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800092c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000930:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000934:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000938:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800093c:	bf08      	it	eq
 800093e:	f020 0001 	biceq.w	r0, r0, #1
 8000942:	4770      	bx	lr
 8000944:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000948:	d121      	bne.n	800098e <__aeabi_d2f+0x7a>
 800094a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800094e:	bfbc      	itt	lt
 8000950:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000954:	4770      	bxlt	lr
 8000956:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095e:	f1c2 0218 	rsb	r2, r2, #24
 8000962:	f1c2 0c20 	rsb	ip, r2, #32
 8000966:	fa10 f30c 	lsls.w	r3, r0, ip
 800096a:	fa20 f002 	lsr.w	r0, r0, r2
 800096e:	bf18      	it	ne
 8000970:	f040 0001 	orrne.w	r0, r0, #1
 8000974:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000978:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800097c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000980:	ea40 000c 	orr.w	r0, r0, ip
 8000984:	fa23 f302 	lsr.w	r3, r3, r2
 8000988:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800098c:	e7cc      	b.n	8000928 <__aeabi_d2f+0x14>
 800098e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000992:	d107      	bne.n	80009a4 <__aeabi_d2f+0x90>
 8000994:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000998:	bf1e      	ittt	ne
 800099a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800099e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009a2:	4770      	bxne	lr
 80009a4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <LM75ADP_conf>:


/*
 * Configure Temp Sensor
 */
HAL_StatusTypeDef LM75ADP_conf(I2C_HandleTypeDef *hi2c, uint32_t Timeout){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	static uint8_t command[2] = {0};
	command[0] = LM75ADP_Reg_Conf;
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <LM75ADP_conf+0x3c>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
	command[1] = LM75ADP_Config_Mode;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <LM75ADP_conf+0x3c>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	705a      	strb	r2, [r3, #1]
	uint16_t Size = sizeof(command);
 80009ca:	2302      	movs	r3, #2
 80009cc:	81fb      	strh	r3, [r7, #14]
	uint16_t DevAddress = LM75ADP_I2C_ADDR;
 80009ce:	2390      	movs	r3, #144	@ 0x90
 80009d0:	81bb      	strh	r3, [r7, #12]

	HAL_StatusTypeDef st_tx = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, Size, LM75ADP_I2C_TIMEOUT);
 80009d2:	89fb      	ldrh	r3, [r7, #14]
 80009d4:	89b9      	ldrh	r1, [r7, #12]
 80009d6:	2264      	movs	r2, #100	@ 0x64
 80009d8:	9200      	str	r2, [sp, #0]
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <LM75ADP_conf+0x3c>)
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fdf9 	bl	80015d4 <HAL_I2C_Master_Transmit>
 80009e2:	4603      	mov	r3, r0
 80009e4:	72fb      	strb	r3, [r7, #11]

	return st_tx;
 80009e6:	7afb      	ldrb	r3, [r7, #11]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000028 	.word	0x20000028

080009f4 <LM75ADP_read>:

/*
 * Read Temp Sensor
 */
HAL_StatusTypeDef LM75ADP_read(I2C_HandleTypeDef *hi2c, LM75ADP_Data *result, uint32_t Timeout){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	static uint8_t command[1] = {0};
	command[0] = LM75ADP_Reg_Temp;
 8000a00:	4b26      	ldr	r3, [pc, #152]	@ (8000a9c <LM75ADP_read+0xa8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
	uint16_t Size = sizeof(command);
 8000a06:	2301      	movs	r3, #1
 8000a08:	82bb      	strh	r3, [r7, #20]
	uint16_t DevAddress = LM75ADP_I2C_ADDR;
 8000a0a:	2390      	movs	r3, #144	@ 0x90
 8000a0c:	827b      	strh	r3, [r7, #18]

	static uint8_t resp[LM75ADP_I2C_RESP_LEN] = {0};

	HAL_StatusTypeDef st_tx = HAL_I2C_Master_Transmit(hi2c, DevAddress, command, Size, LM75ADP_I2C_TIMEOUT);
 8000a0e:	8abb      	ldrh	r3, [r7, #20]
 8000a10:	8a79      	ldrh	r1, [r7, #18]
 8000a12:	2264      	movs	r2, #100	@ 0x64
 8000a14:	9200      	str	r2, [sp, #0]
 8000a16:	4a21      	ldr	r2, [pc, #132]	@ (8000a9c <LM75ADP_read+0xa8>)
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 fddb 	bl	80015d4 <HAL_I2C_Master_Transmit>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75fb      	strb	r3, [r7, #23]
	result->st_tx = st_tx;
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	7dfa      	ldrb	r2, [r7, #23]
 8000a26:	719a      	strb	r2, [r3, #6]
	if(st_tx == HAL_OK){
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d131      	bne.n	8000a92 <LM75ADP_read+0x9e>
		HAL_StatusTypeDef st_rx = HAL_I2C_Master_Receive(hi2c, LM75ADP_I2C_ADDR, resp, LM75ADP_I2C_RESP_LEN, LM75ADP_I2C_TIMEOUT);
 8000a2e:	2364      	movs	r3, #100	@ 0x64
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2302      	movs	r3, #2
 8000a34:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa0 <LM75ADP_read+0xac>)
 8000a36:	2190      	movs	r1, #144	@ 0x90
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f000 fee3 	bl	8001804 <HAL_I2C_Master_Receive>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	747b      	strb	r3, [r7, #17]

		result->st_rx = st_rx;   // store status
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	7c7a      	ldrb	r2, [r7, #17]
 8000a46:	71da      	strb	r2, [r3, #7]
		st_tx = st_rx;            // return last status
 8000a48:	7c7b      	ldrb	r3, [r7, #17]
 8000a4a:	75fb      	strb	r3, [r7, #23]

		if(st_rx == HAL_OK){
 8000a4c:	7c7b      	ldrb	r3, [r7, #17]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d11f      	bne.n	8000a92 <LM75ADP_read+0x9e>
			result->i_temp = (resp[0] <<8) |resp[1];  // 2s compliment value
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <LM75ADP_read+0xac>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <LM75ADP_read+0xac>)
 8000a5e:	785b      	ldrb	r3, [r3, #1]
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	809a      	strh	r2, [r3, #4]
			result->f_temp = result->i_temp / 256.0; // Float value
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	889b      	ldrh	r3, [r3, #4]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fcd3 	bl	800041c <__aeabi_i2d>
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <LM75ADP_read+0xb0>)
 8000a7c:	f7ff fe62 	bl	8000744 <__aeabi_ddiv>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	4610      	mov	r0, r2
 8000a86:	4619      	mov	r1, r3
 8000a88:	f7ff ff44 	bl	8000914 <__aeabi_d2f>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	601a      	str	r2, [r3, #0]
		}
	}
	return st_tx;
 8000a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000002c 	.word	0x2000002c
 8000aa0:	20000030 	.word	0x20000030
 8000aa4:	40700000 	.word	0x40700000

08000aa8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ab0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ab4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000acc:	68fb      	ldr	r3, [r7, #12]
}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 f9eb 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f839 	bl	8000b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f000 f8c9 	bl	8000c7c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000aea:	f000 f887 	bl	8000bfc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f000 fcba 	bl	8001470 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
  HAL_StatusTypeDef status = LM75ADP_conf(&hi2c2, LM75ADP_I2C_TIMEOUT);
 8000afc:	2164      	movs	r1, #100	@ 0x64
 8000afe:	4815      	ldr	r0, [pc, #84]	@ (8000b54 <main+0x7c>)
 8000b00:	f7ff ff58 	bl	80009b4 <LM75ADP_conf>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73bb      	strb	r3, [r7, #14]
  bool process = true;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK) {
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <main+0x3e>
	process = false;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  }
  HAL_Delay(FIVE_SECONDS_MS);
 8000b16:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b1a:	f000 fa43 	bl	8000fa4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Set PA9 to HIGH

  while (process)
 8000b1e:	e011      	b.n	8000b44 <main+0x6c>
  {
	  	LM75ADP_Data result;
	  	status = LM75ADP_read(&hi2c2, &result, LM75ADP_I2C_TIMEOUT);
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2264      	movs	r2, #100	@ 0x64
 8000b24:	4619      	mov	r1, r3
 8000b26:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <main+0x7c>)
 8000b28:	f7ff ff64 	bl	80009f4 <LM75ADP_read>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK) {
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <main+0x64>
			process = false;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e003      	b.n	8000b44 <main+0x6c>
		} else {
			HAL_Delay(FIVE_SECONDS_MS);
 8000b3c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000b40:	f000 fa30 	bl	8000fa4 <HAL_Delay>
  while (process)
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1ea      	bne.n	8000b20 <main+0x48>
 8000b4a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000034 	.word	0x20000034

08000b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	@ 0x68
 8000b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	2248      	movs	r2, #72	@ 0x48
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 fd28 	bl	80035bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <SystemClock_Config+0xa0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b86:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf8 <SystemClock_Config+0xa0>)
 8000b88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <SystemClock_Config+0xa0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ba6:	2360      	movs	r3, #96	@ 0x60
 8000ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 fce8 	bl	8002588 <HAL_RCC_OscConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bbe:	f000 f887 	bl	8000cd0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000bc2:	234f      	movs	r3, #79	@ 0x4f
 8000bc4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 f853 	bl	8002c8c <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bec:	f000 f870 	bl	8000cd0 <Error_Handler>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3768      	adds	r7, #104	@ 0x68
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	58000400 	.word	0x58000400

08000bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c02:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <MX_I2C2_Init+0x78>)
 8000c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <MX_I2C2_Init+0x7c>)
 8000c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c36:	480e      	ldr	r0, [pc, #56]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c38:	f000 fc31 	bl	800149e <HAL_I2C_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c42:	f000 f845 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c4a:	f001 f973 	bl	8001f34 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c54:	f000 f83c 	bl	8000cd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_I2C2_Init+0x74>)
 8000c5c:	f001 f9b4 	bl	8001fc8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f833 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000034 	.word	0x20000034
 8000c74:	40005800 	.word	0x40005800
 8000c78:	00100d14 	.word	0x00100d14

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff ff09 	bl	8000aa8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2002      	movs	r0, #2
 8000c98:	f7ff ff06 	bl	8000aa8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca6:	f000 fbe3 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000caa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f000 fa74 	bl	80011b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <Error_Handler+0x8>

08000cdc <LL_AHB2_GRP1_EnableClock>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ce8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d00:	68fb      	ldr	r3, [r7, #12]
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d30:	68fb      	ldr	r3, [r7, #12]
}
 8000d32:	bf00      	nop
 8000d34:	3714      	adds	r7, #20
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b096      	sub	sp, #88	@ 0x58
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2238      	movs	r2, #56	@ 0x38
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fc27 	bl	80035bc <memset>
  if(hi2c->Instance==I2C2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_I2C_MspInit+0xb0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d13b      	bne.n	8000df0 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d7c:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fafe 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d92:	f7ff ff9d 	bl	8000cd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff ffa0 	bl	8000cdc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff ff9d 	bl	8000cdc <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000da6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da8:	2312      	movs	r3, #18
 8000daa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000db0:	2301      	movs	r3, #1
 8000db2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000db4:	2304      	movs	r3, #4
 8000db6:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f000 f9f5 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dca:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	2312      	movs	r3, #18
 8000dce:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000de0:	4619      	mov	r1, r3
 8000de2:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000de4:	f000 f9e4 	bl	80011b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000dec:	f7ff ff8e 	bl	8000d0c <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000df0:	bf00      	nop
 8000df2:	3758      	adds	r7, #88	@ 0x58
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40005800 	.word	0x40005800
 8000dfc:	48000400 	.word	0x48000400

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f88c 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e68:	f7ff fff6 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	@ (8000ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <LoopForever+0xe>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb0 <LoopForever+0x16>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e92:	f002 fb9b 	bl	80035cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e96:	f7ff fe1f 	bl	8000ad8 <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   r0, =_estack
 8000e9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea8:	080036d0 	.word	0x080036d0
  ldr r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb0:	2000008c 	.word	0x2000008c

08000eb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec2:	2003      	movs	r0, #3
 8000ec4:	f000 f942 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ec8:	f002 f8a4 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a09      	ldr	r2, [pc, #36]	@ (8000ef4 <HAL_Init+0x3c>)
 8000ed0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f810 	bl	8000ef8 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee4:	f7ff ff2a 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_InitTick+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d024      	beq.n	8000f56 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f0c:	f002 f882 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8000f10:	4602      	mov	r2, r0
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <HAL_InitTick+0x6c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f936 	bl	8001196 <HAL_SYSTICK_Config>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10f      	bne.n	8000f50 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	d809      	bhi.n	8000f4a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f36:	2200      	movs	r2, #0
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3e:	f000 f910 	bl	8001162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <HAL_InitTick+0x70>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	e007      	b.n	8000f5a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	73fb      	strb	r3, [r7, #15]
 8000f4e:	e004      	b.n	8000f5a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e001      	b.n	8000f5a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_IncTick+0x1c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	@ (8000f8c <HAL_IncTick+0x20>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a03      	ldr	r2, [pc, #12]	@ (8000f8c <HAL_IncTick+0x20>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000088 	.word	0x20000088

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b02      	ldr	r3, [pc, #8]	@ (8000fa0 <HAL_GetTick+0x10>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	20000088 	.word	0x20000088

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff fff0 	bl	8000f90 <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffe0 	bl	8000f90 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	@ (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	@ (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	@ 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	@ 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff90 	bl	8001050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff49 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001170:	f7ff ff60 	bl	8001034 <__NVIC_GetPriorityGrouping>
 8001174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68b9      	ldr	r1, [r7, #8]
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f7ff ff92 	bl	80010a4 <NVIC_EncodePriority>
 8001180:	4602      	mov	r2, r0
 8001182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff61 	bl	8001050 <__NVIC_SetPriority>
}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffb2 	bl	8001108 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e140      	b.n	8001442 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	4013      	ands	r3, r2
 80011ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8132 	beq.w	800143c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d005      	beq.n	80011f0 <HAL_GPIO_Init+0x40>
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 0201 	and.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b03      	cmp	r3, #3
 800125c:	d017      	beq.n	800128e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d123      	bne.n	80012e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	08da      	lsrs	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3208      	adds	r2, #8
 80012a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0203 	and.w	r2, r3, #3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 808c 	beq.w	800143c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001324:	4a4e      	ldr	r2, [pc, #312]	@ (8001460 <HAL_GPIO_Init+0x2b0>)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	2207      	movs	r2, #7
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800134e:	d00d      	beq.n	800136c <HAL_GPIO_Init+0x1bc>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d007      	beq.n	8001368 <HAL_GPIO_Init+0x1b8>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a43      	ldr	r2, [pc, #268]	@ (8001468 <HAL_GPIO_Init+0x2b8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_GPIO_Init+0x1b4>
 8001360:	2302      	movs	r3, #2
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1be>
 8001364:	2307      	movs	r3, #7
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1be>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1be>
 800136c:	2300      	movs	r3, #0
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800137e:	4938      	ldr	r1, [pc, #224]	@ (8001460 <HAL_GPIO_Init+0x2b0>)
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800138c:	4b37      	ldr	r3, [pc, #220]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b0:	4a2e      	ldr	r2, [pc, #184]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013da:	4a24      	ldr	r2, [pc, #144]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80013e0:	4b22      	ldr	r3, [pc, #136]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 80013e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013e6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001406:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 8001410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001414:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f aeb7 	bne.w	80011c0 <HAL_GPIO_Init+0x10>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40010000 	.word	0x40010000
 8001464:	48000400 	.word	0x48000400
 8001468:	48000800 	.word	0x48000800
 800146c:	58000800 	.word	0x58000800

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800148c:	e002      	b.n	8001494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e08d      	b.n	80015cc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d106      	bne.n	80014ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fc3f 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2224      	movs	r2, #36	@ 0x24
 80014ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	e006      	b.n	8001526 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001524:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d108      	bne.n	8001540 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e007      	b.n	8001550 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800154e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800155e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001562:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001572:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69d9      	ldr	r1, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af02      	add	r7, sp, #8
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	461a      	mov	r2, r3
 80015e0:	460b      	mov	r3, r1
 80015e2:	817b      	strh	r3, [r7, #10]
 80015e4:	4613      	mov	r3, r2
 80015e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	f040 80fd 	bne.w	80017f0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_I2C_Master_Transmit+0x30>
 8001600:	2302      	movs	r3, #2
 8001602:	e0f6      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x21e>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800160c:	f7ff fcc0 	bl	8000f90 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2319      	movs	r3, #25
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 fa09 	bl	8001a36 <I2C_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e0e1      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2221      	movs	r2, #33	@ 0x21
 8001632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2210      	movs	r2, #16
 800163a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165a:	b29b      	uxth	r3, r3
 800165c:	2bff      	cmp	r3, #255	@ 0xff
 800165e:	d906      	bls.n	800166e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	22ff      	movs	r2, #255	@ 0xff
 8001664:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001666:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e007      	b.n	800167e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800167c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001682:	2b00      	cmp	r3, #0
 8001684:	d024      	beq.n	80016d0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	8979      	ldrh	r1, [r7, #10]
 80016c2:	4b4e      	ldr	r3, [pc, #312]	@ (80017fc <HAL_I2C_Master_Transmit+0x228>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 fc03 	bl	8001ed4 <I2C_TransferConfig>
 80016ce:	e066      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	8979      	ldrh	r1, [r7, #10]
 80016d8:	4b48      	ldr	r3, [pc, #288]	@ (80017fc <HAL_I2C_Master_Transmit+0x228>)
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fbf8 	bl	8001ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016e4:	e05b      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	6a39      	ldr	r1, [r7, #32]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f9fc 	bl	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e07b      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fe:	781a      	ldrb	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d034      	beq.n	800179e <HAL_I2C_Master_Transmit+0x1ca>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	d130      	bne.n	800179e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	2200      	movs	r2, #0
 8001744:	2180      	movs	r1, #128	@ 0x80
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f975 	bl	8001a36 <I2C_WaitOnFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e04d      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	2bff      	cmp	r3, #255	@ 0xff
 800175e:	d90e      	bls.n	800177e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	22ff      	movs	r2, #255	@ 0xff
 8001764:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176a:	b2da      	uxtb	r2, r3
 800176c:	8979      	ldrh	r1, [r7, #10]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 fbac 	bl	8001ed4 <I2C_TransferConfig>
 800177c:	e00f      	b.n	800179e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800178c:	b2da      	uxtb	r2, r3
 800178e:	8979      	ldrh	r1, [r7, #10]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fb9b 	bl	8001ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d19e      	bne.n	80016e6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	6a39      	ldr	r1, [r7, #32]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f9e2 	bl	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e01a      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2220      	movs	r2, #32
 80017c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6859      	ldr	r1, [r3, #4]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_I2C_Master_Transmit+0x22c>)
 80017d0:	400b      	ands	r3, r1
 80017d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80017f0:	2302      	movs	r3, #2
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	80002000 	.word	0x80002000
 8001800:	fe00e800 	.word	0xfe00e800

08001804 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	607a      	str	r2, [r7, #4]
 800180e:	461a      	mov	r2, r3
 8001810:	460b      	mov	r3, r1
 8001812:	817b      	strh	r3, [r7, #10]
 8001814:	4613      	mov	r3, r2
 8001816:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b20      	cmp	r3, #32
 8001822:	f040 80db 	bne.w	80019dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_I2C_Master_Receive+0x30>
 8001830:	2302      	movs	r3, #2
 8001832:	e0d4      	b.n	80019de <HAL_I2C_Master_Receive+0x1da>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800183c:	f7ff fba8 	bl	8000f90 <HAL_GetTick>
 8001840:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2319      	movs	r3, #25
 8001848:	2201      	movs	r2, #1
 800184a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f8f1 	bl	8001a36 <I2C_WaitOnFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0bf      	b.n	80019de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2222      	movs	r2, #34	@ 0x22
 8001862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2210      	movs	r2, #16
 800186a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2200      	movs	r2, #0
 8001872:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	893a      	ldrh	r2, [r7, #8]
 800187e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	2bff      	cmp	r3, #255	@ 0xff
 800188e:	d90e      	bls.n	80018ae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	22ff      	movs	r2, #255	@ 0xff
 8001894:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800189a:	b2da      	uxtb	r2, r3
 800189c:	8979      	ldrh	r1, [r7, #10]
 800189e:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <HAL_I2C_Master_Receive+0x1e4>)
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 fb14 	bl	8001ed4 <I2C_TransferConfig>
 80018ac:	e06d      	b.n	800198a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	8979      	ldrh	r1, [r7, #10]
 80018c0:	4b49      	ldr	r3, [pc, #292]	@ (80019e8 <HAL_I2C_Master_Receive+0x1e4>)
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fb03 	bl	8001ed4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018ce:	e05c      	b.n	800198a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 f991 	bl	8001bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e07c      	b.n	80019de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b01      	subs	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	d034      	beq.n	800198a <HAL_I2C_Master_Receive+0x186>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	d130      	bne.n	800198a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	2200      	movs	r2, #0
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f87f 	bl	8001a36 <I2C_WaitOnFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e04d      	b.n	80019de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001946:	b29b      	uxth	r3, r3
 8001948:	2bff      	cmp	r3, #255	@ 0xff
 800194a:	d90e      	bls.n	800196a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	22ff      	movs	r2, #255	@ 0xff
 8001950:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001956:	b2da      	uxtb	r2, r3
 8001958:	8979      	ldrh	r1, [r7, #10]
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 fab6 	bl	8001ed4 <I2C_TransferConfig>
 8001968:	e00f      	b.n	800198a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001978:	b2da      	uxtb	r2, r3
 800197a:	8979      	ldrh	r1, [r7, #10]
 800197c:	2300      	movs	r3, #0
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 faa5 	bl	8001ed4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d19d      	bne.n	80018d0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	6a39      	ldr	r1, [r7, #32]
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f8ec 	bl	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e01a      	b.n	80019de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2220      	movs	r2, #32
 80019ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6859      	ldr	r1, [r3, #4]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_I2C_Master_Receive+0x1e8>)
 80019bc:	400b      	ands	r3, r1
 80019be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80019dc:	2302      	movs	r3, #2
  }
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	80002400 	.word	0x80002400
 80019ec:	fe00e800 	.word	0xfe00e800

080019f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d103      	bne.n	8001a0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d007      	beq.n	8001a2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	699a      	ldr	r2, [r3, #24]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	619a      	str	r2, [r3, #24]
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr

08001a36 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4613      	mov	r3, r2
 8001a44:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a46:	e03b      	b.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	6839      	ldr	r1, [r7, #0]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 f961 	bl	8001d14 <I2C_IsErrorOccurred>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e041      	b.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d02d      	beq.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a64:	f7ff fa94 	bl	8000f90 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d302      	bcc.n	8001a7a <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d122      	bne.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699a      	ldr	r2, [r3, #24]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4013      	ands	r3, r2
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	bf0c      	ite	eq
 8001a8a:	2301      	moveq	r3, #1
 8001a8c:	2300      	movne	r3, #0
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d113      	bne.n	8001ac0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e00f      	b.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d0b4      	beq.n	8001a48 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af4:	e033      	b.n	8001b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f90a 	bl	8001d14 <I2C_IsErrorOccurred>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e031      	b.n	8001b6e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d025      	beq.n	8001b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fa3d 	bl	8000f90 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d11a      	bne.n	8001b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d013      	beq.n	8001b5e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f043 0220 	orr.w	r2, r3, #32
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e007      	b.n	8001b6e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d1c4      	bne.n	8001af6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b82:	e02f      	b.n	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 f8c3 	bl	8001d14 <I2C_IsErrorOccurred>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e02d      	b.n	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b98:	f7ff f9fa 	bl	8000f90 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d302      	bcc.n	8001bae <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d11a      	bne.n	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b20      	cmp	r3, #32
 8001bba:	d013      	beq.n	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e007      	b.n	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d1c8      	bne.n	8001b84 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001c0c:	e071      	b.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f87e 	bl	8001d14 <I2C_IsErrorOccurred>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d13b      	bne.n	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d138      	bne.n	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d105      	bne.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d121      	bne.n	8001ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001c80:	400b      	ands	r3, r1
 8001c82:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	75fb      	strb	r3, [r7, #23]
 8001ca0:	e002      	b.n	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8001ca8:	f7ff f972 	bl	8000f90 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d302      	bcc.n	8001cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d119      	bne.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d116      	bne.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d00f      	beq.n	8001cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d002      	beq.n	8001d06 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d083      	beq.n	8001c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	fe00e800 	.word	0xfe00e800

08001d14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d068      	beq.n	8001e12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d48:	e049      	b.n	8001dde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d50:	d045      	beq.n	8001dde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d52:	f7ff f91d 	bl	8000f90 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d302      	bcc.n	8001d68 <I2C_IsErrorOccurred+0x54>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d13a      	bne.n	8001dde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d8a:	d121      	bne.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d92:	d01d      	beq.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d94:	7cfb      	ldrb	r3, [r7, #19]
 8001d96:	2b20      	cmp	r3, #32
 8001d98:	d01a      	beq.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001da8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001daa:	f7ff f8f1 	bl	8000f90 <HAL_GetTick>
 8001dae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db0:	e00e      	b.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001db2:	f7ff f8ed 	bl	8000f90 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b19      	cmp	r3, #25
 8001dbe:	d907      	bls.n	8001dd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	f043 0320 	orr.w	r3, r3, #32
 8001dc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001dce:	e006      	b.n	8001dde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0320 	and.w	r3, r3, #32
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d1e9      	bne.n	8001db2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	d003      	beq.n	8001df4 <I2C_IsErrorOccurred+0xe0>
 8001dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0aa      	beq.n	8001d4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d103      	bne.n	8001e04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2220      	movs	r2, #32
 8001e02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00b      	beq.n	8001e3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00b      	beq.n	8001e80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fdb1 	bl	80019f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <I2C_IsErrorOccurred+0x1bc>)
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3728      	adds	r7, #40	@ 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	fe00e800 	.word	0xfe00e800

08001ed4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ef4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	0d5b      	lsrs	r3, r3, #21
 8001f0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <I2C_TransferConfig+0x5c>)
 8001f14:	430b      	orrs	r3, r1
 8001f16:	43db      	mvns	r3, r3
 8001f18:	ea02 0103 	and.w	r1, r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	03ff63ff 	.word	0x03ff63ff

08001f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d138      	bne.n	8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e032      	b.n	8001fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2224      	movs	r2, #36	@ 0x24
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0201 	bic.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e000      	b.n	8001fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fbc:	2302      	movs	r3, #2
  }
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d139      	bne.n	8002052 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e033      	b.n	8002054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	@ 0x24
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800201a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a03      	ldr	r2, [pc, #12]	@ (8002078 <HAL_PWR_EnableBkUpAccess+0x18>)
 800206a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002080:	4b03      	ldr	r3, [pc, #12]	@ (8002090 <HAL_PWREx_GetVoltageRange+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	58000400 	.word	0x58000400

08002094 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020a4:	d101      	bne.n	80020aa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_PWR_IsEnabledBkUpAccess+0x18>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	58000400 	.word	0x58000400

080020b8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002102:	d101      	bne.n	8002108 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002104:	2301      	movs	r3, #1
 8002106:	e000      	b.n	800210a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002124:	6013      	str	r3, [r2, #0]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800213c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800215c:	d101      	bne.n	8002162 <LL_RCC_HSE_IsReady+0x18>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_RCC_HSE_IsReady+0x1a>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800217a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b6:	d101      	bne.n	80021bc <LL_RCC_HSI_IsReady+0x18>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <LL_RCC_HSI_IsReady+0x1a>
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	061b      	lsls	r3, r3, #24
 80021dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d101      	bne.n	8002206 <LL_RCC_LSE_IsReady+0x18>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <LL_RCC_LSE_IsReady+0x1a>
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d101      	bne.n	8002268 <LL_RCC_LSI_IsReady+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_RCC_LSI_IsReady+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6013      	str	r3, [r2, #0]
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d101      	bne.n	80022c0 <LL_RCC_MSI_IsReady+0x16>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_RCC_MSI_IsReady+0x18>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d101      	bne.n	80022e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80022ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002332:	4313      	orrs	r3, r2
 8002334:	604b      	str	r3, [r1, #4]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800236a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800238e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr

080023a2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80023aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80023b2:	f023 020f 	bic.w	r2, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002438:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002458:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800245c:	6013      	str	r3, [r2, #0]
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002474:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002478:	6013      	str	r3, [r2, #0]
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002490:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002494:	d101      	bne.n	800249a <LL_RCC_PLL_IsReady+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_RCC_PLL_IsReady+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0303 	and.w	r3, r3, #3
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002510:	d101      	bne.n	8002516 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002528:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800252c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002534:	d101      	bne.n	800253a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002556:	d101      	bne.n	800255c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002574:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002578:	d101      	bne.n	800257e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e36f      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	f7ff fee4 	bl	8002366 <LL_RCC_GetSysClkSource>
 800259e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a0:	f7ff ffa2 	bl	80024e8 <LL_RCC_PLL_GetMainSource>
 80025a4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80c4 	beq.w	800273c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x3e>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d176      	bne.n	80026ae <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d173      	bne.n	80026ae <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e353      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_RCC_OscConfig+0x68>
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025ee:	e006      	b.n	80025fe <HAL_RCC_OscConfig+0x76>
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025fe:	4293      	cmp	r3, r2
 8002600:	d222      	bcs.n	8002648 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fd18 	bl	800303c <RCC_SetFlashLatencyFromMSIRange>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e331      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002620:	f043 0308 	orr.w	r3, r3, #8
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002634:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe69 	bl	8002318 <LL_RCC_MSI_SetCalibTrimming>
 8002646:	e021      	b.n	800268c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe50 	bl	8002318 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fcdd 	bl	800303c <RCC_SetFlashLatencyFromMSIRange>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e2f6      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800268c:	f000 fcc2 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8002690:	4603      	mov	r3, r0
 8002692:	4aa7      	ldr	r2, [pc, #668]	@ (8002930 <HAL_RCC_OscConfig+0x3a8>)
 8002694:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002696:	4ba7      	ldr	r3, [pc, #668]	@ (8002934 <HAL_RCC_OscConfig+0x3ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fc2c 	bl	8000ef8 <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d047      	beq.n	800273a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	e2e5      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d02c      	beq.n	8002710 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b6:	f7ff fddc 	bl	8002272 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026ba:	f7fe fc69 	bl	8000f90 <HAL_GetTick>
 80026be:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c2:	f7fe fc65 	bl	8000f90 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e2d2      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80026d4:	f7ff fde9 	bl	80022aa <LL_RCC_MSI_IsReady>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f1      	beq.n	80026c2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026e8:	f043 0308 	orr.w	r3, r3, #8
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fe05 	bl	8002318 <LL_RCC_MSI_SetCalibTrimming>
 800270e:	e015      	b.n	800273c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002710:	f7ff fdbd 	bl	800228e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002714:	f7fe fc3c 	bl	8000f90 <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800271c:	f7fe fc38 	bl	8000f90 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e2a5      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800272e:	f7ff fdbc 	bl	80022aa <LL_RCC_MSI_IsReady>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f1      	bne.n	800271c <HAL_RCC_OscConfig+0x194>
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800273a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d058      	beq.n	80027fa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b08      	cmp	r3, #8
 800274c:	d005      	beq.n	800275a <HAL_RCC_OscConfig+0x1d2>
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d108      	bne.n	8002766 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d105      	bne.n	8002766 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d14b      	bne.n	80027fa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e289      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0x204>
 8002786:	f7ff fcc4 	bl	8002112 <LL_RCC_HSE_Enable>
 800278a:	e00d      	b.n	80027a8 <HAL_RCC_OscConfig+0x220>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8002794:	d104      	bne.n	80027a0 <HAL_RCC_OscConfig+0x218>
 8002796:	f7ff fc8f 	bl	80020b8 <LL_RCC_HSE_EnableTcxo>
 800279a:	f7ff fcba 	bl	8002112 <LL_RCC_HSE_Enable>
 800279e:	e003      	b.n	80027a8 <HAL_RCC_OscConfig+0x220>
 80027a0:	f7ff fcc5 	bl	800212e <LL_RCC_HSE_Disable>
 80027a4:	f7ff fc96 	bl	80020d4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d012      	beq.n	80027d6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fbee 	bl	8000f90 <HAL_GetTick>
 80027b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7fe fbea 	bl	8000f90 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e257      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80027ca:	f7ff fcbe 	bl	800214a <LL_RCC_HSE_IsReady>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f1      	beq.n	80027b8 <HAL_RCC_OscConfig+0x230>
 80027d4:	e011      	b.n	80027fa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe fbdb 	bl	8000f90 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027de:	f7fe fbd7 	bl	8000f90 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b64      	cmp	r3, #100	@ 0x64
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e244      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80027f0:	f7ff fcab 	bl	800214a <LL_RCC_HSE_IsReady>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f1      	bne.n	80027de <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d046      	beq.n	8002894 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d005      	beq.n	8002818 <HAL_RCC_OscConfig+0x290>
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d10e      	bne.n	8002830 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e22a      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fccc 	bl	80021c6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800282e:	e031      	b.n	8002894 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d019      	beq.n	800286c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002838:	f7ff fc98 	bl	800216c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe fba8 	bl	8000f90 <HAL_GetTick>
 8002840:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe fba4 	bl	8000f90 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e211      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002856:	f7ff fca5 	bl	80021a4 <LL_RCC_HSI_IsReady>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f1      	beq.n	8002844 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fcae 	bl	80021c6 <LL_RCC_HSI_SetCalibTrimming>
 800286a:	e013      	b.n	8002894 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286c:	f7ff fc8c 	bl	8002188 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fb8e 	bl	8000f90 <HAL_GetTick>
 8002874:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe fb8a 	bl	8000f90 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1f7      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800288a:	f7ff fc8b 	bl	80021a4 <LL_RCC_HSI_IsReady>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f1      	bne.n	8002878 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d06e      	beq.n	800297e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d056      	beq.n	8002956 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	429a      	cmp	r2, r3
 80028be:	d031      	beq.n	8002924 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e1d0      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d013      	beq.n	800290a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80028e2:	f7ff fca5 	bl	8002230 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028e6:	f7fe fb53 	bl	8000f90 <HAL_GetTick>
 80028ea:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ee:	f7fe fb4f 	bl	8000f90 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b11      	cmp	r3, #17
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1bc      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002900:	f7ff fca6 	bl	8002250 <LL_RCC_LSI_IsReady>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f1      	bne.n	80028ee <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002912:	f023 0210 	bic.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002924:	f7ff fc74 	bl	8002210 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe fb32 	bl	8000f90 <HAL_GetTick>
 800292c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800292e:	e00c      	b.n	800294a <HAL_RCC_OscConfig+0x3c2>
 8002930:	20000000 	.word	0x20000000
 8002934:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fb2a 	bl	8000f90 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b11      	cmp	r3, #17
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e197      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800294a:	f7ff fc81 	bl	8002250 <LL_RCC_LSI_IsReady>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f1      	beq.n	8002938 <HAL_RCC_OscConfig+0x3b0>
 8002954:	e013      	b.n	800297e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	f7ff fc6b 	bl	8002230 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe fb19 	bl	8000f90 <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002962:	f7fe fb15 	bl	8000f90 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b11      	cmp	r3, #17
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e182      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002974:	f7ff fc6c 	bl	8002250 <LL_RCC_LSI_IsReady>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f1      	bne.n	8002962 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80d8 	beq.w	8002b3c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800298c:	f7ff fb82 	bl	8002094 <LL_PWR_IsEnabledBkUpAccess>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d113      	bne.n	80029be <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002996:	f7ff fb63 	bl	8002060 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe faf9 	bl	8000f90 <HAL_GetTick>
 800299e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fe faf5 	bl	8000f90 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e162      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80029b4:	f7ff fb6e 	bl	8002094 <LL_PWR_IsEnabledBkUpAccess>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f1      	beq.n	80029a2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d07b      	beq.n	8002abe <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b85      	cmp	r3, #133	@ 0x85
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d109      	bne.n	80029ea <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029e2:	f043 0304 	orr.w	r3, r3, #4
 80029e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fad1 	bl	8000f90 <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fac3 	bl	8000f90 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e12e      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a1c:	f7ff fbe7 	bl	80021ee <LL_RCC_LSE_IsReady>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0ef      	beq.n	8002a06 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b81      	cmp	r3, #129	@ 0x81
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b85      	cmp	r3, #133	@ 0x85
 8002a34:	d121      	bne.n	8002a7a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe faab 	bl	8000f90 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fa9d 	bl	8000f90 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e108      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ec      	beq.n	8002a52 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a78:	e060      	b.n	8002b3c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fa89 	bl	8000f90 <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fa7b 	bl	8000f90 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0e6      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ec      	bne.n	8002a96 <HAL_RCC_OscConfig+0x50e>
 8002abc:	e03e      	b.n	8002b3c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7fe fa67 	bl	8000f90 <HAL_GetTick>
 8002ac2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fa59 	bl	8000f90 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0c4      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1ec      	bne.n	8002ada <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fe fa46 	bl	8000f90 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b1a:	e00a      	b.n	8002b32 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1c:	f7fe fa38 	bl	8000f90 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0a3      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002b32:	f7ff fb5c 	bl	80021ee <LL_RCC_LSE_IsReady>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ef      	bne.n	8002b1c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8099 	beq.w	8002c78 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2b0c      	cmp	r3, #12
 8002b4a:	d06c      	beq.n	8002c26 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d14b      	bne.n	8002bec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b54:	f7ff fc87 	bl	8002466 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa1a 	bl	8000f90 <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fa16 	bl	8000f90 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b0a      	cmp	r3, #10
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e083      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b72:	f7ff fc86 	bl	8002482 <LL_RCC_PLL_IsReady>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f1      	bne.n	8002b60 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	4b40      	ldr	r3, [pc, #256]	@ (8002c84 <HAL_RCC_OscConfig+0x6fc>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b8e:	4311      	orrs	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b94:	0212      	lsls	r2, r2, #8
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b9c:	4311      	orrs	r1, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb2:	f7ff fc4a 	bl	800244a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f9e3 	bl	8000f90 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7fe f9df 	bl	8000f90 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b0a      	cmp	r3, #10
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e04c      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002be0:	f7ff fc4f 	bl	8002482 <LL_RCC_PLL_IsReady>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f1      	beq.n	8002bce <HAL_RCC_OscConfig+0x646>
 8002bea:	e045      	b.n	8002c78 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	f7ff fc3b 	bl	8002466 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f9ce 	bl	8000f90 <HAL_GetTick>
 8002bf4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe f9ca 	bl	8000f90 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b0a      	cmp	r3, #10
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e037      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c0a:	f7ff fc3a 	bl	8002482 <LL_RCC_PLL_IsReady>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f1      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <HAL_RCC_OscConfig+0x700>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	60cb      	str	r3, [r1, #12]
 8002c24:	e028      	b.n	8002c78 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e023      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	f003 0203 	and.w	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d115      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10e      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	11c1808c 	.word	0x11c1808c
 8002c88:	eefefffc 	.word	0xeefefffc

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e10f      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b89      	ldr	r3, [pc, #548]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d91b      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b86      	ldr	r3, [pc, #536]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 0207 	bic.w	r2, r3, #7
 8002cb6:	4984      	ldr	r1, [pc, #528]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbe:	f7fe f967 	bl	8000f90 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cc6:	f7fe f963 	bl	8000f90 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0f3      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fb40 	bl	800237c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe f948 	bl	8000f90 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d04:	f7fe f944 	bl	8000f90 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0d4      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d16:	f7ff fbf2 	bl	80024fe <LL_RCC_IsActiveFlag_HPRE>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f1      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d016      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fb36 	bl	80023a2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d36:	f7fe f92b 	bl	8000f90 <HAL_GetTick>
 8002d3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d3e:	f7fe f927 	bl	8000f90 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e0b7      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d50:	f7ff fbe6 	bl	8002520 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f1      	beq.n	8002d3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fb2f 	bl	80023ce <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d70:	f7fe f90e 	bl	8000f90 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d78:	f7fe f90a 	bl	8000f90 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e09a      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d8a:	f7ff fbdb 	bl	8002544 <LL_RCC_IsActiveFlag_PPRE1>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f1      	beq.n	8002d78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d017      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb24 	bl	80023f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dac:	f7fe f8f0 	bl	8000f90 <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002db4:	f7fe f8ec 	bl	8000f90 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e07c      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002dc6:	f7ff fbce 	bl	8002566 <LL_RCC_IsActiveFlag_PPRE2>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f1      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d043      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002de4:	f7ff f9b1 	bl	800214a <LL_RCC_HSE_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11e      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e066      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d106      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002dfa:	f7ff fb42 	bl	8002482 <LL_RCC_PLL_IsReady>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d113      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e05b      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e10:	f7ff fa4b 	bl	80022aa <LL_RCC_MSI_IsReady>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d108      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e050      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e1e:	f7ff f9c1 	bl	80021a4 <LL_RCC_HSI_IsReady>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e049      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fa85 	bl	8002340 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e36:	f7fe f8ab 	bl	8000f90 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3e:	f7fe f8a7 	bl	8000f90 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e035      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	f7ff fa87 	bl	8002366 <LL_RCC_GetSysClkSource>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1ec      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e64:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d21b      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 0207 	bic.w	r2, r3, #7
 8002e7a:	4913      	ldr	r1, [pc, #76]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e82:	f7fe f885 	bl	8000f90 <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e8a:	f7fe f881 	bl	8000f90 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e011      	b.n	8002ec0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x23c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d1ef      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002eaa:	f000 f8b3 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe f81d 	bl	8000ef8 <HAL_InitTick>
 8002ebe:	4603      	mov	r3, r0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	58004000 	.word	0x58004000
 8002ecc:	20000000 	.word	0x20000000
 8002ed0:	20000004 	.word	0x20000004

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	f7ff fa40 	bl	8002366 <LL_RCC_GetSysClkSource>
 8002ee6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee8:	f7ff fafe 	bl	80024e8 <LL_RCC_PLL_GetMainSource>
 8002eec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x2c>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d139      	bne.n	8002f6e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d136      	bne.n	8002f6e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002f00:	f7ff f9e3 	bl	80022ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d115      	bne.n	8002f36 <HAL_RCC_GetSysClockFreq+0x62>
 8002f0a:	f7ff f9de 	bl	80022ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_GetSysClockFreq+0x4e>
 8002f14:	f7ff f9e9 	bl	80022ea <LL_RCC_MSI_GetRange>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	e005      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0x5a>
 8002f22:	f7ff f9ed 	bl	8002300 <LL_RCC_MSI_GetRangeAfterStandby>
 8002f26:	4603      	mov	r3, r0
 8002f28:	0a1b      	lsrs	r3, r3, #8
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	4a36      	ldr	r2, [pc, #216]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	e014      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x8c>
 8002f36:	f7ff f9c8 	bl	80022ca <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_GetSysClockFreq+0x7a>
 8002f40:	f7ff f9d3 	bl	80022ea <LL_RCC_MSI_GetRange>
 8002f44:	4603      	mov	r3, r0
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	e005      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x86>
 8002f4e:	f7ff f9d7 	bl	8002300 <LL_RCC_MSI_GetRangeAfterStandby>
 8002f52:	4603      	mov	r3, r0
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003008 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f60:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d115      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f6c:	e012      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b04      	cmp	r3, #4
 8002f72:	d102      	bne.n	8002f7a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e00c      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d109      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f80:	f7ff f8b6 	bl	80020f0 <LL_RCC_HSE_IsEnabledDiv2>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f8a:	4b20      	ldr	r3, [pc, #128]	@ (800300c <HAL_RCC_GetSysClockFreq+0x138>)
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e001      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f90:	4b1f      	ldr	r3, [pc, #124]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f92:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	f7ff f9e7 	bl	8002366 <LL_RCC_GetSysClkSource>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d12f      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f9e:	f7ff faa3 	bl	80024e8 <LL_RCC_PLL_GetMainSource>
 8002fa2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0xde>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d003      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xe4>
 8002fb0:	e00d      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002fb2:	4b16      	ldr	r3, [pc, #88]	@ (800300c <HAL_RCC_GetSysClockFreq+0x138>)
 8002fb4:	60fb      	str	r3, [r7, #12]
        break;
 8002fb6:	e00d      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fb8:	f7ff f89a 	bl	80020f0 <LL_RCC_HSE_IsEnabledDiv2>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	@ (800300c <HAL_RCC_GetSysClockFreq+0x138>)
 8002fc4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002fc6:	e005      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fca:	60fb      	str	r3, [r7, #12]
        break;
 8002fcc:	e002      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	60fb      	str	r3, [r7, #12]
        break;
 8002fd2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002fd4:	f7ff fa66 	bl	80024a4 <LL_RCC_PLL_GetN>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	fb03 f402 	mul.w	r4, r3, r2
 8002fe0:	f7ff fa77 	bl	80024d2 <LL_RCC_PLL_GetDivider>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	3301      	adds	r3, #1
 8002fea:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fee:	f7ff fa65 	bl	80024bc <LL_RCC_PLL_GetR>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	0f5b      	lsrs	r3, r3, #29
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ffc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002ffe:	697b      	ldr	r3, [r7, #20]
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}
 8003008:	08003688 	.word	0x08003688
 800300c:	00f42400 	.word	0x00f42400
 8003010:	01e84800 	.word	0x01e84800

08003014 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b598      	push	{r3, r4, r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003018:	f7ff ff5c 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 800301c:	4604      	mov	r4, r0
 800301e:	f7ff f9fc 	bl	800241a <LL_RCC_GetAHBPrescaler>
 8003022:	4603      	mov	r3, r0
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	4a03      	ldr	r2, [pc, #12]	@ (8003038 <HAL_RCC_GetHCLKFreq+0x24>)
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd98      	pop	{r3, r4, r7, pc}
 8003038:	08003648 	.word	0x08003648

0800303c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800303c:	b590      	push	{r4, r7, lr}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	4a10      	ldr	r2, [pc, #64]	@ (8003090 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003054:	f7ff f9ec 	bl	8002430 <LL_RCC_GetAHB3Prescaler>
 8003058:	4603      	mov	r3, r0
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	4a0c      	ldr	r2, [pc, #48]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a09      	ldr	r2, [pc, #36]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	0c9c      	lsrs	r4, r3, #18
 8003078:	f7ff f800 	bl	800207c <HAL_PWREx_GetVoltageRange>
 800307c:	4603      	mov	r3, r0
 800307e:	4619      	mov	r1, r3
 8003080:	4620      	mov	r0, r4
 8003082:	f000 f80b 	bl	800309c <RCC_SetFlashLatency>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bd90      	pop	{r4, r7, pc}
 8003090:	08003688 	.word	0x08003688
 8003094:	08003648 	.word	0x08003648
 8003098:	431bde83 	.word	0x431bde83

0800309c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	@ 0x38
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80030a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <RCC_SetFlashLatency+0xf4>)
 80030a8:	f107 0320 	add.w	r3, r7, #32
 80030ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030b0:	6018      	str	r0, [r3, #0]
 80030b2:	3304      	adds	r3, #4
 80030b4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80030b6:	4a37      	ldr	r2, [pc, #220]	@ (8003194 <RCC_SetFlashLatency+0xf8>)
 80030b8:	f107 0318 	add.w	r3, r7, #24
 80030bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030c0:	6018      	str	r0, [r3, #0]
 80030c2:	3304      	adds	r3, #4
 80030c4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80030c6:	4a34      	ldr	r2, [pc, #208]	@ (8003198 <RCC_SetFlashLatency+0xfc>)
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80030ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030dc:	d11b      	bne.n	8003116 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e2:	e014      	b.n	800310e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	3338      	adds	r3, #56	@ 0x38
 80030ea:	443b      	add	r3, r7
 80030ec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d807      	bhi.n	8003108 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	3338      	adds	r3, #56	@ 0x38
 80030fe:	443b      	add	r3, r7
 8003100:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003104:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003106:	e021      	b.n	800314c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	3301      	adds	r3, #1
 800310c:	633b      	str	r3, [r7, #48]	@ 0x30
 800310e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003110:	2b02      	cmp	r3, #2
 8003112:	d9e7      	bls.n	80030e4 <RCC_SetFlashLatency+0x48>
 8003114:	e01a      	b.n	800314c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003116:	2300      	movs	r3, #0
 8003118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800311a:	e014      	b.n	8003146 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800311c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	3338      	adds	r3, #56	@ 0x38
 8003122:	443b      	add	r3, r7
 8003124:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4293      	cmp	r3, r2
 800312e:	d807      	bhi.n	8003140 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	3338      	adds	r3, #56	@ 0x38
 8003136:	443b      	add	r3, r7
 8003138:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800313c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800313e:	e005      	b.n	800314c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003142:	3301      	adds	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	2b02      	cmp	r3, #2
 800314a:	d9e7      	bls.n	800311c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800314c:	4b13      	ldr	r3, [pc, #76]	@ (800319c <RCC_SetFlashLatency+0x100>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f023 0207 	bic.w	r2, r3, #7
 8003154:	4911      	ldr	r1, [pc, #68]	@ (800319c <RCC_SetFlashLatency+0x100>)
 8003156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800315c:	f7fd ff18 	bl	8000f90 <HAL_GetTick>
 8003160:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003162:	e008      	b.n	8003176 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003164:	f7fd ff14 	bl	8000f90 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e007      	b.n	8003186 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <RCC_SetFlashLatency+0x100>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003180:	429a      	cmp	r2, r3
 8003182:	d1ef      	bne.n	8003164 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3738      	adds	r7, #56	@ 0x38
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	0800362c 	.word	0x0800362c
 8003194:	08003634 	.word	0x08003634
 8003198:	0800363c 	.word	0x0800363c
 800319c:	58004000 	.word	0x58004000

080031a0 <LL_RCC_LSE_IsReady>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d101      	bne.n	80031b8 <LL_RCC_LSE_IsReady+0x18>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <LL_RCC_LSE_IsReady+0x1a>
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_SetUSARTClockSource>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	43db      	mvns	r3, r3
 80031d8:	401a      	ands	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr

080031f2 <LL_RCC_SetI2SClockSource>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003206:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <LL_RCC_SetLPUARTClockSource>:
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <LL_RCC_SetI2CClockSource>:
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003252:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800325e:	43db      	mvns	r3, r3
 8003260:	401a      	ands	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800326a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	bc80      	pop	{r7}
 800327c:	4770      	bx	lr

0800327e <LL_RCC_SetLPTIMClockSource>:
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	43db      	mvns	r3, r3
 8003296:	401a      	ands	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <LL_RCC_SetRNGClockSource>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <LL_RCC_SetADCClockSource>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80032e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <LL_RCC_SetRTCClockSource>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003318:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <LL_RCC_GetRTCClockSource>:
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <LL_RCC_ForceBackupDomainReset>:
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800336a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800337a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
	...

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003394:	2300      	movs	r3, #0
 8003396:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003398:	2300      	movs	r3, #0
 800339a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d058      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80033a8:	f7fe fe5a 	bl	8002060 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ac:	f7fd fdf0 	bl	8000f90 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033b2:	e009      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b4:	f7fd fdec 	bl	8000f90 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d902      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	74fb      	strb	r3, [r7, #19]
        break;
 80033c6:	e006      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033c8:	4b7b      	ldr	r3, [pc, #492]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d4:	d1ee      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80033d6:	7cfb      	ldrb	r3, [r7, #19]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d13c      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80033dc:	f7ff ffa7 	bl	800332e <LL_RCC_GetRTCClockSource>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d00f      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f8:	f7ff ffa5 	bl	8003346 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033fc:	f7ff ffb3 	bl	8003366 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d014      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fdbc 	bl	8000f90 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800341a:	e00b      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7fd fdb8 	bl	8000f90 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d902      	bls.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	74fb      	strb	r3, [r7, #19]
            break;
 8003432:	e004      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003434:	f7ff feb4 	bl	80031a0 <LL_RCC_LSE_IsReady>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d1ee      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800343e:	7cfb      	ldrb	r3, [r7, #19]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff5b 	bl	8003304 <LL_RCC_SetRTCClockSource>
 800344e:	e004      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	74bb      	strb	r3, [r7, #18]
 8003454:	e001      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d004      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fea9 	bl	80031c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fe9e 	bl	80031c2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fec0 	bl	800321c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fee6 	bl	800327e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fedb 	bl	800327e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d004      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fed0 	bl	800327e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fea9 	bl	8003246 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fe9e 	bl	8003246 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d004      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fe93 	bl	8003246 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d011      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff fe5e 	bl	80031f2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353e:	d107      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800354a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d010      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fea5 	bl	80032b0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800357c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fea3 	bl	80032da <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800359c:	d107      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80035ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	58000400 	.word	0x58000400

080035bc <memset>:
 80035bc:	4402      	add	r2, r0
 80035be:	4603      	mov	r3, r0
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d100      	bne.n	80035c6 <memset+0xa>
 80035c4:	4770      	bx	lr
 80035c6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ca:	e7f9      	b.n	80035c0 <memset+0x4>

080035cc <__libc_init_array>:
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003604 <__libc_init_array+0x38>)
 80035d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003608 <__libc_init_array+0x3c>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	2600      	movs	r6, #0
 80035d8:	42a6      	cmp	r6, r4
 80035da:	d109      	bne.n	80035f0 <__libc_init_array+0x24>
 80035dc:	4d0b      	ldr	r5, [pc, #44]	@ (800360c <__libc_init_array+0x40>)
 80035de:	4c0c      	ldr	r4, [pc, #48]	@ (8003610 <__libc_init_array+0x44>)
 80035e0:	f000 f818 	bl	8003614 <_init>
 80035e4:	1b64      	subs	r4, r4, r5
 80035e6:	10a4      	asrs	r4, r4, #2
 80035e8:	2600      	movs	r6, #0
 80035ea:	42a6      	cmp	r6, r4
 80035ec:	d105      	bne.n	80035fa <__libc_init_array+0x2e>
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
 80035f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f4:	4798      	blx	r3
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7ee      	b.n	80035d8 <__libc_init_array+0xc>
 80035fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fe:	4798      	blx	r3
 8003600:	3601      	adds	r6, #1
 8003602:	e7f2      	b.n	80035ea <__libc_init_array+0x1e>
 8003604:	080036c8 	.word	0x080036c8
 8003608:	080036c8 	.word	0x080036c8
 800360c:	080036c8 	.word	0x080036c8
 8003610:	080036cc 	.word	0x080036cc

08003614 <_init>:
 8003614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003616:	bf00      	nop
 8003618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800361a:	bc08      	pop	{r3}
 800361c:	469e      	mov	lr, r3
 800361e:	4770      	bx	lr

08003620 <_fini>:
 8003620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003622:	bf00      	nop
 8003624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003626:	bc08      	pop	{r3}
 8003628:	469e      	mov	lr, r3
 800362a:	4770      	bx	lr
